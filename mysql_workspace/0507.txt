SQL> --SYS 계정은 되도록 사용을 지양하도록 한다. 워낙 막강하기 때문에.
SQL> -- 사용이 부담스러움. SYS보다는 하위의 관리자인 SYSYEM을 이용하자.
SQL> --SYS 계정으로 로그인한 상태에서 SYSTEM 의 계정을 재할당
SQL> ALTER USER SYSTEM
  2  IDENTIFIED BY 1234;

User altered.

SQL> -- 이미 SQLPLUS 에 접속을 한 상태에서 다른 계정으로 전환할때
SQL> -- SQLPLUS 호출하지 말자. 접속 전환을 하자. CONNECT 혹은 CONN
SQL> CONN SYSTEM/1234
Connected.
SQL> --현재 접속 계정 확인
SQL> SHOW USER
USER is "SYSTEM"
SQL> -- 현재 시스템에 존재하는 모든 유저를 출력
SQL> -- 오라클에서 시스템 정보를 알기 위해서는 사전 (DICTIONARY)을 조회
SQL> -- 현재 접속자가 관리자인 경우 사전의 이름은 접두어가 DBA_, V$로 시작함.
SQL> SELECT USERNAME FROM DBA_USERS;

USERNAME                                                                        
------------------------------------------------------------                    
SYS                                                                             
SYSTEM                                                                          
ANONYMOUS                                                                       
JAVA                                                                            
JS                                                                              
APEX_PUBLIC_USER                                                                
FLOWS_FILES                                                                     
APEX_040000                                                                     
OUTLN                                                                           
DIP                                                                             
ORACLE_OCM                                                                      

USERNAME                                                                        
------------------------------------------------------------                    
XS$NULL                                                                         
MDSYS                                                                           
CTXSYS                                                                          
DBSNMP                                                                          
XDB                                                                             
APPQOSSYS                                                                       
HR                                                                              

18 rows selected.

SQL> --일반계정인 JS로 로그인 하자.
SQL> CONN JS/ 1234
Connected.
SQL> SHOW USER;
USER is "JS"
SQL> --제약 조건을 추가적으로 학습하자.
SQL> -- NOT NULL , DEFAULT , UNIQUE , CHECK , PRIMARY KEY , FOREIGN KEY
SQL> --JS가 보유한 테이블 목록을 보고싶다.
SQL> -- 사전을 조회하자 , 현재 계정이 일반계정이기 떄문에 사전은 USER_로 시작할 가능성 높음.
SQL> SELECT TABLE_NAME FROM USER_TABLES;

TABLE_NAME                                                                      
------------------------------------------------------------                    
MEMBER                                                                          

SQL> -- 제약 조건중 너무 너무 필수적인 제약조건인 PRIMARY KEY 배울 예정.
SQL> -- UNIQUE 제약조건에 NOT NULL을 합쳐놓은 제약조건.
SQL> -- UNIQUE 만으로는 아직 무결성을 보장받지 못하는 경우를 경험해보자.
SQL> CREATE TABLE MEMBER2(
  2  ID VARCHAR2(20)
  3  , EMAIL VARCHAR2(25)
  4  , REGDATE DATE DEFAULT SYSDATE
  5  );

Table created.

SQL> DROP TABLE MEMBWE2;
DROP TABLE MEMBWE2
           *
ERROR at line 1:
ORA-00942: table or view does not exist 


SQL> DROP TABLE MEMBER2;

Table dropped.

SQL> CREATE TABLE MEMBER2(
  2  ID VARCHAR2(20) UNIQUE
  3  , EMAIL VARCHAR(25) NOT NULL
  4  , REGDATE DATE DEFAULT SYSDATE
  5  );

Table created.

SQL> INSERT INTO MEMBER2(ID,EMAIL) VALUES('KING','DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(ID,EMAIL) VALUES('KING','DAUM');
INSERT INTO MEMBER2(ID,EMAIL) VALUES('KING','DAUM')
*
ERROR at line 1:
ORA-00001: unique constraint (JS.SYS_C007006) violated 


SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> INSERT INTO MEMBER2(EMAIL) VALUES('DAUM');

1 row created.

SQL> SELECT *FROM MEMBER2;

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
KING                                                                            
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                
                                                                                
DAUM                                               25/05/07                     
                                                                                

ID                                                                              
----------------------------------------                                        
EMAIL                                              REGDATE                      
-------------------------------------------------- --------                     
                                                                                
DAUM                                               25/05/07                     
                                                                                

7 rows selected.

SQL> -- UNIQUE는 중복을 허용하진 않지만, NULL을 허용해버림.
SQL> -- 따라서 테이블에 입력된 데이터들 간 구분을 위한
SQL> -- 숫자형 컬럼을 추가할 때에는 UNIQUE + NOT NULL을 합친 제약조건을
SQL> -- 부여해야 안전하다. 하지만 , UNIQUE + NOT NULL을 굳이 둘다 명시할 필요가 없다.
SQL> -- 왜냐하면 둘을 합쳐놓은 제약조건인 PRIMARY KEY가 있으므로...
SQL> CREATE TABLE MEMBER3(
  2  ID NUMBER PRIMARY KEY
  3  , EMAIL VARCHAR2(25)
  4  , REGDATE DATE DEFAULT SYSDATE
  5  , USER ID VARCHAR2(20)
  6  );
, USER ID VARCHAR2(20)
  *
ERROR at line 5:
ORA-00904: : invalid identifier 


SQL> CREATE TABLE MEMBER3(
  2  USER ID VARCHAR2(20)
  3  , EMAIL VARCHAR2(25)
  4  , REGDATE DATE DEFAULT SYSDATE
  5  , ID NUMBER PRIMARY KEY
  6  );
USER ID VARCHAR2(20)
*
ERROR at line 2:
ORA-00904: : invalid identifier 


SQL> CREATE TABLE MEMBER3(
  2  ID NUMBER PRIMARY KEY
  3  , USERID VARCHAR2(20)
  4  , EMAIL VARCHAR2(25)
  5  , REGDATE DATE DEFAULT SYSDATE
  6  );

Table created.

SQL> -- PRIMARY KEY 값은 유일해야 하므로 , 시스템이 알아서 증가시켜 가면서
SQL> -- 스스로 넣도록 맡기자.
SQL> -- 따라서 오직 숫자값 만을 전용으로 증가시켜주는 객체인 시퀀스를 이용하자.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;
CREATE SEQUENCE SEQ_MEMBER3
*
ERROR at line 1:
ORA-01031: insufficient privileges 


SQL> -- 권한을 부여받기 위해서 다시 SYSTEM으로 접속
SQL> CONN SYSTEM/ 1234
Connected.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2    2  INCREMENT BY 1
  3  ;
  2  INCREMENT BY 1
  *
ERROR at line 2:
ORA-00933: SQL command not properly ended 


SQL> GRANT CREATE SEQUENCE TO JS;

Grant succeeded.

SQL> --다시 JS로
SQL> CONN JS/ 1234
Connected.
SQL> CREATE SEQUENCE SEQ_MEMBER3
  2  INCREMENT BY 1
  3  START WITH 1;

Sequence created.

SQL> INSERT INTO MEMBER3 (ID,USERID,EMAIL)
  2  VALUES(SEQ_MEMBER3,NEXTVAL,'KING','DAUM');
INSERT INTO MEMBER3 (ID,USERID,EMAIL)
            *
ERROR at line 1:
ORA-00913: too many values 


SQL> INSERT INTO MEMBER3(ID,USERID,EMAIL)
  2  VALUES(SEQ_MEMBER3,NEXTBVAL,'KING','DAUM');
INSERT INTO MEMBER3(ID,USERID,EMAIL)
            *
ERROR at line 1:
ORA-00913: too many values 


SQL> SPOOLOFF
SP2-0042: unknown command "SPOOLOFF" - rest of line ignored.
SQL> SPOOL OFF
