자바 프로그래밍 기초 1차시

1.자바 특징 

O O P 객체 지향 프로그램
프로그램의 데이터를 객체로 취급하여 프로그래밍 하는 방법.

2. 자바로 만들 수 있는 프로그램

 2-1 서버 프로그램. 
(JSP_html에 자바 코드를 넣어 웹페이지를 생성하여 웹 브라우저에 실행시켜주는 언어 ,
 servlet_ 서버에서 웹 페이즈 동적 생성 및 데이터 처리를 위해 자바로 작성된 프로그램)
위 두가지를 이용하여 웹 어플리케이션 개발 가능. 
홈페이지 , 포털 , 인터넷 뱅킹 , ERP , 업무관련 시스템

 2-2 안드로이드 프로그램 개발 (어플리케이션)
 대부분은 C , C++로 게임을 개발하나 , 자바로 만들어진 게임도 있음 (마인크래프트)

 2-3 빅데이터 플랫폼 개발
 하둡 (데이터 분산저장 가능한 오픈소스 프레임워크 _ 여러 서버에 나눠서 저장)
 하둡 에코 시스템의 대부분의 소프트웨어도 자바로 만들어짐. 
_ 해당 수집,저장된 빅데이터를 분석하는데 사용되는 언어는 보통 파이썬, R. 
  그러나 머하웃이라는 소프트웨어는 자바로 만들어졌으며 분산처리 머신 러닝도 처리 가능)


자바 프로그래밍 기초 2차시

1. JDK (자바개발킷) 자바 개발을 위한 프로그램들이 들어있는 도구 설치
  오라클 사이트 접속 (www.oracle.com)
  좌측 상단 메뉴버튼 - 우측 하단 Downloads 클릭 - 내려서 JAVA 클릭 후 JAVA(JDK) for Developers 클릭 - JDK download 클릭 - 윈도우64버전 다운로드.
 파일 실행 후 기본경로 설정 설치.

2. 환경변수 설정
 PC내 어디에서나 자바를 실행하기 위한 설정 , 이후 설치할 이클립스 혹은 자바 관련 프로그램 실행시 자바 경로 설정 작업
 
윈도우 시스템 - 제어판 - 시스템 및 보안 - 시스템 - 좌측 고급시스템설정 - 환경변수 - 시스템변수에 새로만들기 - 변수이름 : JAVA_HOME , 변수 값 : 디렉터리 찾아보기 후 내PC 로컬C programfiles java jdk14.0.1 선택
path_ 라는 변수 선택 후 편집 버튼 _ 새로만들기 클릭 _ %JAVA_HOME%\bin 확인_

cmd 명령 프롬프트 실행 - java -version 엔터 - 

3. 이클립스 설치 (IDE _통합개발환경) 코드작성 - 컴파일 - 배포 등 다양한 작업 가능 / 자바의 대표적인 개발 툴
이클립스 사이트 접속 (www.eclipse.org) 
우측에 다운로드 _ 파일 실행 _ 2번째의 Enterprise java developers 선택 _ 설치 경로 - java-study 로 변경 후 설치. - 런치 버튼 후 D:\java-sutdy\workspace 런치


자바 프로그래밍 기초 3차시

이클립스 실행 후 헬로우 월드 표출 _ 다시 보면서 확인

자바 프로그래밍 기초 4차시

1. 주석이란 무엇이고 사용하는 이유
comment _ 소스 코드 내에 설명 문구를 넣거나 , 특정 코드를 실행되지 않게하기 위해 사용.
한줄주석 : //  여러줄 주석 : /* .....*/ 
주석은 프로그램 실행에 영향을 주지 않음.
다른 개발자 혹은 내가 다시 소스를 봤을 때 쉽게 이해할 수 있도록 소스에 대한 설명을 적기 위함.
내가 왜 이렇게 코딩했는지 적는다.

// 여기는 한줄 주석
/* 여기에 넣는 여러줄 주석은 실행 되지 않음. */

자바 프로그래밍 기초 5차시

1. 변수란
값을 담아두는 공간 , 값이 할당된 메모리 주소 , 사용전 반드시 선언 필요.
컴퓨터는0과1 2진수를 사용하여 데이터 처리. 혹은 프로그램을 통해 10진수 사용 

2. 변수 사용하는 방법
모든 변수는 반드시 선언후 사용
변수선언 : 이 변수가 어떤 타입인지 선언하는 것. 자료명(변수타입) 변수이름(변수명) 
변수 초기화 : 변수명 = 값;  초기값 넣어주는 것
선언과 동시에 초기값 설정 가능.

3. 변수 명명 규칙
변수명은 알파벳과 숫자로 구성
특수문자는_와$만 사용가능
숫자 시작X
공백 X
대소문자 구분됨
자바에서 이미 사용하는 예악어(키워드) 사용 불가
의미있는 이름 짓기

자바 프로그래밍 기초 6차시

1. 자료형 (기본자료형 , 참조자료형)

 자료형 (data type) 데이터값의 형태 , 변수 선언시 어떤 값이 들어갈지 자료형을 미리 지정.
 
기본자료형 : 값(정수,알파벳 등)을 가지고 있는 변수
참조 자료형 : 주소를 가지고 있는(참조하는) 변수

2. 기본자료형의 종류

논리형 - boolean(불리언) true 혹은 false 값 조건식에서 주로 사용. (기본값 false) 
문자형 - string 
정수형 - int : 플마 21억
         - long : 그 이상 혹은 이하
실수형 - double 소숫점이 들어가는 경우 , (실수인 경우) 실수값 저장시 사용.

자바 프로그래밍 기초 7차시

1. 참조자료형 - 값이 메모리에 저장되며 메모리의 주소값을 저장
   메모리주소를 레퍼런스(참조) 한다. 
   기본자료형이 아닌 모든 자료형이 참조자료형

2. 참조자료의 유형

문자열 - String (클래스를 이용한 객체) , 문자들이 나열되어 있는 구조 쌍따옴표("")로 감싸서 표현
배열
클래스 - 직접 만들수 있음
인터페이스 - 직접 만들 수 있음

자바 프로그래밍 기초 8차시

1 상수란?
변하지 않는 수 <-> 변수 / 항상 같은 값 / final 키워드 사용
사용하는 이유 : 프로그램 내에서 값을 변경하면 안되는 값 , 변경이 필요할 때는 선언값을 수정
                   (카드 수수료율 , 포인트 적립률 등) - 정책이 변경되면 상수에 선언된 값 변경
2 상수 사용 방법

관례적으로 대문자로 사용. 
상수라는 선언은 final XXX(doubel,int등)

final double PI = 3.14;

3 리터럴이란?

소스상에서 직접 입력되는 값
내부적으로는 상수와 같은 의미
그냥 값 자체를 리터럴이라고 부름.
종류 : 정수,실수,문자,논리

4 변수의 사용 범위 (scope)

변수는 중괄호 블록{} 내에서만 선언,사용가능
클래스 , 메서드 , if문 , for 문

자바 프로그래밍 기초 9차시

형변환 : 자료형을 다른 자료형으로 변환하는것. (int타입 - long타입 , casting이라고도 함)

1. 자동형변환 (작은 자료형값은 큰자료형으로 저장하면 자동으로 저장됨) int 자료형을 long 자료형에 담는 등 , 연산관계에서 자동형변환이 일어나기도함

2. 강제형변환 (큰 자료형은 작은 자료형에 담지 못하기 때문에 , 괄호를 넣어서 (int) 등으로 강제로 형변환을 시켜 변환.

3. 연산하는 경우 , 큰 자료형 기준으로 자동형변환

4. 자료형 크기 순서 : int long double

자바 프로그래밍 기초 10차시

연산의 종류 및 기본연산자의 이해

기본연산자

1. 대입연산 (변수에 값을 대입) 
변수를 선언하고 , 초기화 하는 과정도 포함
변수에 값을 대입하는 연산
연산의 결과를 변수에 대입. 
오른족의 값을 왼쪽 변수에 대입. = (equal)을 기준으로 한다

int weight = 80;
weight = weight - 10;



2. 산술연산 (사칙연산+나머지연산)

% = 나머지
/ = 나눗셈
따라서 10%3 = 1
10/3 = 3 
double c = 10/3;
c의 값은 3
double d = (double)10/3;
d의 값은 3.3333

3. 증감연산 (1 증가 혹은 1 감소)


증감연산자가 변수 앞에 올때 전위연산
++number

증감연산자가 변수 뒤에올때 후위연산
number++

int x = 1;
int y = 1;

Sysout(++x);   -> 2
Sysout(y++);   -> 1

Sysout(x);   ->2
Sysout(y);   ->2

j=1 , i=0
i = j--
# i=1 , j=0


출력 이전에 숫자를 더하느냐 , 출력 하고난 이후에 숫자를 더하느냐의 차이

이외 연산자

1. 비교연산 (같다,다르다,작다,크다 == , != , < , >)
2. 논리연산 (and,or,not 연산)
3. 삼항연산 (특정 조건에 따라 다른 결과 수행 , 조건식? 값1 : 값2 등)
4. 비트연산 (비트 *0과1 로 연산 / & , l , ^ , ! , << , >> , >>> 등)

자바 프로그래밍 기초 11차시

1. 비트연산이란?

비트 논리연산과 비트 쉬프트 연산이 있음.

숫자 1 = 1
숫자 2 = 10
숫자 3 = 11

2. 비트연산의 종류 (비트 논리연산 , 비트 쉬프트 연산)

비트 논리 연산

0과 1로 연산. (1은 true , 0은 false)
& : 두 비트 모두 1
ㅣ : 두 비트 중 하나 이상이 1
^ : 두 비트 중 하나만 1
! 비트의 논리값 바꿈
정수 자료형만 비트 연산 가능.
연산의 결과는 int

비트 쉬프트 연산

비트를 왼쪽 또는 오른쪽으로 밀어서 이동시키는 연산 (사용 빈도는 높지 않음)
<< 왼쪽 비트를 오른쪽 수 만큼 이동 (빈자리는 0)
>> 왼쪽 비트를 오른족 수 만큼 이동 (빈자리는 왼쪽 끝 비트값)
>>> 왼쪽 비트를 오른쪽 수 만큼 이동 (빈자리는 0)

3 << 3 
3이라는 비트 연산자를 왼쪽으로 3칸 이동
이상태에선 2진수 값을 확인할 수 없기 때문에
인티저(Integer 라는 클래스_첫자가 대문자면 클래스) 안에 tobinarystring(2진수 표현을 위한 메서드)
Sysout _ Integer.toBinaryString(24)
-> 11000
Sysout _ Integer.toBinaryString(-8)
-> 11111111111111111111000 쯤
Sysout _ -8 >> 3
-> -1 
Sysout _ Integer.toBinaryString(-8 >> 3)


3. 삼항연산

3개의 항으로 이루어진 연산
if(조건문)으로 대체 가능하지만 , 한줄로 간편하게 사용이 가능한 장점

조건식(true or false) ? 값1(true) : 값2(false)

조건식 ? 참 : 거짓

int score = 80;
String pass = score >= 60 ? "합격" : "불합격"

pass 를 출력하면 score가 60 이상일 경우 합격 , 60 미만일경우 불합격

4. 삼항연산 사용법
조건식 ? 참 : 거짓


5. 연산자 우선순위
괄호안에있는거 먼저한다 정도만 기억할 것

자바 프로그래밍의 기초 12차시

1. 조건문이란?

프로그램의 실행 순서는 위에서 아래로 / 왼쪽에서 오른쪽으로 (클래스나 메서드 같은 경우는 제외)
프로그램 실행 방향을 조건에 따라 변경해야 하는 경우 사용.

점심 먹기
배고픈가 ? 집에 밥이 있나 ? 밥값이 있나? Y/N 에 따라 다른 결과 얻기

2. 조건문의 종류

if문
만약 ~~ 라면의 조건에 따라 분기
조건의 결과값은 항상 boolean 값(true / false) 
boolean 변수 , 비교연산 , 논리연산

switch문
변수나 연산값에 따라 실행문 선택 실행


3. if문의 사용법

 3-1 if 문 
 (if (조건문) {참 
     실행문; -> 실행
          }
조건문 = 참 -> 실행
조건문 = 거짓 -> 실행X

 3-2 if else 문
 if(조건문) { 참
   실행문1; -> 실행
     } else { 거짓
      실행문2; ->실행
            }
조건문 =   참 -> 실행문1 실행
조건문 = 거짓 -> 실행문2 실행

 3-3 if else if 문
 if (조건문1) {
     실행문1;
  }  esle if (조건문2) {
     실행문2;
          }
조건문1이 참이면 실행문1 실행
조건문2가 참이면 실행문2 실행

else if = 반복적 추가 가능
 else = 추가 가능

예시

                       score = 95;
		String grade = "";
		if (score >= 90 ) {
			grade = "A+";
		}else if (score >= 80) {
			grade = "A";
		}else if (score >= 70) {
			grade = "B";
		} else if (score >= 60) {
			grade = "C";
		} else {
			grade = "D";
		}
		System.out.println(grade);
		}


자바 프로그래밍의 기초 13차시

switch-case 문 , case문에 문자열 이용하기

1. switch 문의 사용법

조건식의 변수값이나 연산식에 따라 실행문 선택 실행
조건식에 포함될 수 있는 자료형(byte, short, int, char, String)
조건식의 결과에 따른 case 지정
아래 break 의 경우 , 각 케이스에 해당하는 실행문을 실행하고나면 멈춰라.
break를 안넣으면 모든 문을 실행하니 꼭 넣어야함.
default 는 모든 case에 해당되지 않는 경우 실행되는 실행문.

switch(조건식) {
    case 값1:
    실행문 1;
    break;
    case값2 :
    실행문2;
    break;

    default :
    실행문
       }

2. switch문에서 문자열 사용하기

switch(문자열) {
    case 값1:
    실행문 1;
    break;
    case값2 :
    실행문2;
    break;

    default :
    실행문
       }

3/ switch 문 if문으로 변환

                                if (grade==1) {
			System.out.println("1등급");
		}else if (grade ==2) {
			System.out.println("2등급");
		}else if (grade ==3 ) {
			System.out.println("3등급");
		}else {
		System.out.println("기타");	

자바 프로그래밍의 기초 14차시

1. 반복문이란?

위에서 아래로 / 왼쪽에서 오른족으로
프로그램의 실행 방향을 조건에 따라 만족될 때까지 반복해야 하는 경우 사용.
(배고픈가 -> 집에 밥이 있나? -> 밥값이 있나? -> 시켜먹는다)

2. 반복문의 종류

for문 - 주어진 조건(주로 횟수) 이 참인 동안 반복문 내의 실행문을 반복 실행
초기화식, 조건식 , 증감식 포함
모든 반복문은 조건문을 포함
반복횟수를 미리 알고 있는 경우 많이 사용
 
for (초기화식; 조건식; 증감식) {
수행문;
}

for (int i=0; i<10; i++) {
      Sysout _i  
}


while문

조건이 참인 경우 반복 실행
조건은 boolean값
반복횟수를 알 수 없을 때 많이 사용

                              int number = 0;
		while (number <10) {
			System.out.println(number);
			number++;

do-while문

                                int number = 0;
		do {
			System.out.println("실행");
			number++;
		}while (number < 10);


while문과 유사하나 조건이 하단에 있어
조건의 결과에 상관없이 최소 한 번 실행
(조건식이 참이던 거짓이던 조건식이 한번은 실행됨)

3. for 문의 사용법

                                 for (int i = 0; i<10; i++) {
			System.out.println(i);
		                   }

자바 프로그래밍의 기초 15차시

1. 중첩된 반복문

반복문 안에 반복문이 추가로 있음.

2. 중첩 반복문의 실행 순서

바깥쪽 반복문이 한번에 안쪽 반복문은 전부 다 실행
안쪽 반복문이 끝나면 바깥 반복문이 다음 반복으로 실행


3. 반복문의 중지 방법

break 
반복문 자체를 중지.
더이상 반복 되지 않고 멈춤

coutinue
현재 반복의 실행문을 중지
다음 반복으로 넘어감

구구단 반복 시켜보기.

for (int i=0; i<3; i++) {
   for(int j=0; j<3; j++) {
       Sysout_ (i + " " + j)
   }
} 







