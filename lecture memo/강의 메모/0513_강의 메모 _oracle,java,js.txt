
--------------------------------------------------------------------------------------------------------

수업 시작.

[JavaScript] 진도

1) js에서 객체를 정의하는 3가지 방법
   1. ES6 지원 클래스
   2. 객체 리터럴에 의한 객체 정의 let x = {key : value};
   3. 생성자 함수에 의한 객체 정의 (옛날 방식이라 사용 안함)
 
2) 내장 객체
 - Array, Date, String 
 - let a = "korea";

--------------------------------------------------------------------------------------------------------

[Java] 진도
 - 메서드 public_접근자 static_수식자 void_반환형 test(){}

 - 메서드 오버로딩
    같은 클래스 내에서 메서드 명을 중복 정의하는 기법
    100% 동일하면 안됨 ! (매개변수의 갯수 & 자료형) 으로 차별화

 - 생성자는 메서드이다. 반환형을 두는 순간 , 일반 메서드가 되어버린다.
   오버로딩 적용된다. 따라서 하나의 클래스 내에 생성자 여러개가 가능하다.

 - 개발 시 프로젝트 구조
	project   /src : 원본 소스
		/bin : 컴파일된 바이트 코드 위치

 - package : 관련성 있는 클래스끼리 묶기 위해서 사용.
	    중복을 피하거나 , 유일성을 보장하기 위해서
	    기업의 도메인과 프로젝트명으로 접두어를 사용 
	    ex) com.sinse.프로젝트명
--------------------------------------------------------------------------------------------------------

[DB] 진도

ERD 보고 참고하여 테이블 생성



--------------------------------------------------------------------------------------------------------

JavaScript 진도 나가기

js는 사용자의 하드디스크 접근 가능
javascript는 사용자의 pc에 접근할 수 없다. (보안상_다운로드 받아지기 때문에)

<input type=file> 컴포넌트에 의해 사용자가 파일을 선택하게 되면
해당 파일에 대해서만 접근을 수락으로 보고, 접근권한이 있다 판단하며 제어가 가능해짐.

이때 브라우저가 읽어들인 파일을 제어할 수 있도록 제공되는 객체가 FileReader 이다.

참고) FileReader는 JS표준은 아니지만 , 너무나 많이 쓰기 때문에 필수 객체가 되어버림.
따라서 거의 대부분의 브라우저가 지원해줌.

--------------------------------------------------------------------------------------------------------

모든 파일은 사람이 읽을 수 있는지 여부를 기준으로 할 때 단 2가지로 분류함

1. 문서 파일 _ 사람이 읽을수있음 ex) 메모장 / .java / csv

2. 바이너리 파일 _ 사람이 읽을 수 없음 ex) 이미지 , 동영상 , psd , excel , class 

            let reader = new FileReader();

            reader.readAsDataURL(e.target.files[0])

--------------------------------------------------------------------------------------------------------

JSON (제이슨) JavaScript Object Notion

프로그래밍 언어가 아니라 , 데이터를 표현함에 있어 , 단지 자바스크립트의 객체 표현법을
전세계 개발자가 알고 있기 때문에, 별도의 표기법 표준을 지정할 필요 없기 때문에,
js의 객체 표기법을 본떠서 데이터를 표현해놓은 문자열

{
	"store_name" : "김밥천국",
	"tel" : "02-335-888",
	"pos" : "37.50968, 127.0555"
	"iconImg" : "../images/map/chicken.png"
}


--------------------------------------------------------------------------------------------------------

{
	"name" : "영희",
	"age" : "28",
	"pet" : [
		{"animaltype": "dog", "name" : "뽀미", "sex" : "female"},
		{"animaltype": "cat", "name" : "냥", "sex" : "male"}
	]	
}


--------------------------------------------------------------------------------------------------------

위의 코드에서 js입장에서는 문자열에 불과하므로 
그 내부의 데이터를 접근할 방법 즉 구조화 되어있지 않다.
따라서 JSON 문자열을 자바스크립트 뿐 만 아니라, 프로그래밍 언어에서 사용하려면
문자열 그대로는 사용할 수 없으며 해석 작업이 선행 되어야 한다.
이러한 문자열 해석을 IT분야에서는 파싱(parsing) 이라 한다.

JS 내장 객체 중 JSON 내장 객체는 문자열화된 JSON 문자열을 객체로
자동 변환하거나, 아니면 객체 리터럴로 된 실제 객체를 
반대로 JSON 문자열로 바꿔주기도 함.
    

//해석 후, 쌍따옴표 제거 후 객체 리터럴 반환
	let obj = JSON.parse(man); 

//객체 리터럴을 문자열로 변환
	JSON.stringify(obj); 



--------------------------------------------------------------------------------------------------------

Java 시작

다른 개발자가 선물한 클래스 사용해보기

결론) 남이 만든 클래스는 어떤 변수나 함수를 가지고 있는지 알 수 없다.
해결책 ) 
결론)



--------------------------------------------------------------------------------------------------------

java 수식자의 종류

1) static (정적인)
변수에 적용하면 클래스 변수
메서드에 적용하면 클래스 메서드

2) final (마지막)
변수에 붙이면 변수에 값을 지정
메서드에 붙이면 자식이 부모의 메서드를 재정의할 수 없음.
(오버로딩 불가능)

3)abstract




--------------------------------------------------------------------------------------------------------

캡슐화

객체지향 언어의 장점

1) 캡슐화가 가능
2) 상속 가능
3) 추상화 가능


클래스 작성 시, 데이터를 보호하고 이 보호된 데이터를 외부에서 사용하게 해주려면
공개된 메서드를 제공해주어야 하는데 , 이러한 클래스 정의 기법을 가리켜
은닉화, (캡슐화)encapsulation 이라 한다.

--------------------------------------------------------------------------------------------------------
데이터에 의해 읽기  , 쓰기가 가능하도록 메서드 정의하기

-> get+멤버변수 조합 (getter 메서드)
-> set+멤버변수 조합  (setter 메서드)

public int getBalance(){
	return balance;
}

public void setBalance(int balance){
	this.balance=balance;
}

public String getNum(){
	return num;
}

public String settOwner(String owner){
	this.owner=owner;
}


--------------------------------------------------------------------------------------------------------

getter 메서드를 통해 값을 조절하는것과
변수 자체에 접근하여 값을 조절하는 것의 가장 큰 차이점은

"메서드는 조건을 부여할 수 있다." (if문 등)





--------------------------------------------------------------------------------------------------------

E(Entiry)
R(Relation)
D(Diagram)

-> 개체 관계

-- 반려동물의 주인 만들기

CREATE TABLE OWNER(
OWNER_ID NUMBER PRIMARY KEY
, OWNER_NAME VARCHAR2(20)
, PHONE VARCHAR2(20)
);

-- 주인 테이블에 PK값을 자동 증가시켜줄 시퀀스 생성

CREATE SEQUENCE SEQ_OWNER
INCREMENT BY 1
START WITH 1;

--동물 타입 테이블 생성

CREATE TABLE ANIMALTYPE(
ANIMALTYPE_ID NUMBER PRIMARY KEY
, TYPE_NAME VARCHAR2(25)
);

--동물타입 시퀀스 생성

CREATE SEQUENCE SEQ_ANIMALTYPE
INCREMENT BY 1
START WITH 1;

-- 펫 테이블 생성

CREATE TABLE PET(
pet_id number primary key
, pet_name varchar2(20)
, age number
, owner_id number
, animaltype_id number
, constraint fk_owner_pet foreign key(owner_id) references owner(owner_id)
, constraint fk_animaltype_pet foreign key(animaltype_id) references animaltype(animaltype_id)
);

-- 펫 테이블 시퀀스 생성

CREATE SEQUENCE SEQ_PET
INCREMENT BY 1
START WITH 1;
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

