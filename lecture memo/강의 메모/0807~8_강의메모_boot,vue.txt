
--------------------------------------------------------------------------------------------------------

수업 시작.

스프링: java, jsp& servlet, mvc 설정 난이도 높음 
	→ 전통적 스프링mvc의 dispatcher servlet 초기화 이전 시점은 자동으로 해주고
	나머지는 기존 spring mvc와 동일

web.xml의 정식 명칭 DD(Deployment Descriptor)
이제부터 수업은 Rest API로 진행하고 open API를 많이 사용할것임
open API는 남이 가지고 있는 데이터임

통계청 근무하는 개발자가 운영하는게 오라클,
전국의 유치원 관련된 정보를 제공 할때 db데이터를 직접 보여주는게 아니라 주소로 요청

/kinder/list
/kinder/regist
/kinder/update ..등등 → 동사에 맞춰져있음
근데 이런 요청 주소는 개발자 개인이 만든 주소
이런 uri도 표준이 있다.

url을 restful하게 명시해야 공개가 가능하다고여??
표현적 상태 전송 → 데이터 표현할때 동사로 표현하면 안되고, 명사적으로 표현해야함

게시판 /board/list → /boards , GET (명사로 변경)
글쓰기 /boards , POST
상세보기 /boards/5 , GET (5는 파라미터가 아니라 주소..)
삭제 /boards/5 , DELETE
수정 /board/5 PUT

목록이랑 글쓰기는 url이 똑같은데?? → Http 요청 메서드로 구분하자! (get, post ,. ..)
→ 주소창이 데이터 자체에 충실하고 있다 ⇒ REST (REspresentational State Transfer)

<img src =”/data/dog.jpg”>.
응답 페이지에 이미지가 있다면 다시 서버로 요청하는 구조다.

이미지 요청은 default servlet이 담당하는데 만약 dispatcher servlet 매핑을 “/”로만 했다면 이미지 요청마저 다 담당하게 됨
그래서 .jpg, .png등등으로 끝나는 컨트롤러가 없으면 404에러가 뜸
그래서 default servlet의 영역?을 침범하지 않기 위해서 spring boot에서는 정적 자원의 경로는 자동 매핑?????
 == 정해진 디렉토리에 이미지를 넣어야 한다.

스프링이 톰캣을 내장하고 있어서 별도로 다운받지 않아도 됨 !
gradle과 maven 같은걸 빌드 툴이라고 한다.
원본 소스와 자원을 실행 가능한 상태로 만들어주 는 과정 : 빌드
빌드를 도와주는 툴: 빌드툴


--------------------------------------------------------------------------------------------------------

@RestController 

-> reponsebody 가 생략되어 있기 때문에,
제이슨문자열 잘 날라옴.


--------------------------------------------------------------------------------------------------------
CMD 창에서 요청 보내기

curl http://localhost:9999/test

curl -X POST http://localhost:9999/boards


--------------------------------------------------------------------------------------------------------

Visual Studio Code 창에서 요청 보내기
rest client 다운
.http 파일 만들기


--------------------------------------------------------------------------------------------------------
JPA 셋팅 

mysql jdbc  8.0.33 그래들
Spring boot starter jdbc 3.5.4 그래들

build.graddle에 추가

application.properties 셋팅 추가


--------------------------------------------------------------------------------------------------------

Vue 를 개발하는 2가지 방법 !! 

1. CDN 방식
	- 개발 단계에서만 사용하는 것을 추천

2. Project 설정 방식
	- 실제 제품 개발 단계에서 사용하는 것을 추천
	- 일종의 프레임워크 기반이므로 , Node.js가 설치되어 있어야 함.
	- Node.js 를 배울 필요는 없고 , 단지 개발 도구가 Node.js 기반인 것 뿐
--------------------------------------------------------------------------------------------------------

Vue 3 이상에서는 모든 코드를 setup() 안에 넣으면 됨 !!!

스프링부트부터 분산환경에서 작업이 가능해짐 ! MSA 라고 함.

스프링은 MSA 지원이 안됨 !! 

JSP 는 분산안하는 환경에서 유리.
HTML 에서 뷰 + 리액트는 분산 환경에서 유리 !! 

--------------------------------------------------------------------------------------------------------
js 에서는 for , forEach 둘다 반복문임 ! 

forEach는 배열의 각 요소에 대해 콜백 함수를 한번 씩 실행하는 배열 메서드
고전적인 for문과 목적이 다름.

[특징]
        1) 반드시 배열이 있어야함.
        2) 콜백 함수의 두번째 인자가 인덱스이다.
        3) break , continue 사용 불가. (즉 , 반복 중단 불가능)
        4) 반환값은 undefined, 즉 반복 결과를 반환하지 않음.
        
--------------------------------------------------------------------------------------------------------

구조분해란??

객체나 배열에서 필요한 값만 쉽게 꺼내서 변수에 담을 수 있는 문법

예) 
const person={
	name:"scott",
	age:30
}

const{name,age}





--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

