
--------------------------------------------------------------------------------------------------------

수업 시작.

Docker 사용법 시작.


--------------------------------------------------------------------------------------------------------
Docker 다운로드 후

파일명 Dockerfile (확장자 없이 , all files로 저장)

cmd창 열어서
docker info 쳐보기

이후

docker build -t myimage .

확인방법 : docker images

도커에 이미지는 존재하지만 , 파일은 존재하지 않기 때문에 내보내기 해야함.

docker save -o myimageforyou.tar myimage

그러나 이미지 파일명이 겹치면 안되므로 삭제

docker image rm myimage

상대 도커 이미지를 불러오기

docker load -i myimageforyou.tar

docker container run --name forme myimage (받은 파일 실행)

docker container stop forme (도커 컨테이너 스탑)

docker container ps (실행중인 도커 있는지 확인)
--------------------------------------------------------------------------------------------------------

Docker는 AMD 호환성 문제로 빠이빠이....

--------------------------------------------------------------------------------------------------------

JDBC = Java DataBase Connectivity = 자바의 데이터베이스 연동 기술 및 지원 패키지 (java.sql 패키지에서...)
JDBC 쿼리문 수행을 담당하는 인터페이스는 PreparedStatement

접속부터 성공해야함.

메인 실행부 안에

try{
Class.forName("com.mysql.jdbc.Driver");
System.out.println("드라이브 로드 성공");


String url= "jdbc:mysql://localhost:3306/dev";
String id="root";
String pass="1234";

Connection con=DriverManager.getConnection(url, id, pass);
		if(con == null){
			System.out.println("접속 실패 ㅜㅜ");
		}else{
			System.out.println("접속 성공 ^^");
			String sql="insert into member3(uid, pwd, email) values('Scott', '1234', 'Scott@daum.net')";
		}

}catch(ClassNotFoundException e){
			System.out.println("드라이브명을 확인해주세요");	
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
}
--------------------------------------------------------------------------------------------------------

접속 완료된 시점에

String sql="insert into member3(uid, pwd, email) values('Scott', '1234', 'Scott@daum.net')";


PreparedStatement pstmt = con.prepareStatement(sql);
			//준비된 문장으로 쿼리 실행
int result = pstmt.executeUpdate(); //DML 수행시 이 메서드 사용해야함
			
			if(result>0){
				System.out.println("등록 성공");
			}else{
				System.out.println("등록 실패");
			}
		

--------------------------------------------------------------------------------------------------------
DB와 스트림과 같은 자원을 차지하는 기술은 사용후 반드시 닫아야함.

안닫으면 메모리를 계속 확보하고 있다..
만일 웹서버에 이 닫지않은 코드가 올라간다면.. 동시 자원이 다수 생성 !!

--------------------------------------------------------------------------------------------------------

stream 이란?
 - 현실 : 물줄기 , 물의 흐름
 - 전산 : 데이터의 흐름 (즉 그 대상이 데이터임)

stream의 방향성
 - 입력 (Input) : 실행중인 프로그램으로 데이터가 들어가면
 - 출력 (Output) : 실행 중인 프로그램에서 데이터가 나오면

--------------------------------------------------------------------------------------------------------

stream의 데이터 처리 방법에 따른 분류

1) 바이트 기반의 스트림
	- 데이터를 1byte씩 처리
	 예) 읽을때 1byte를 읽는 경우 - 바이트 기반의 입력 스트림

2) 문자 기반의 스트림 
	- 데이터를 한 문자씩 처리하는 스트림
	  한 문자씩 처리하므로 한글도 이해함


--------------------------------------------------------------------------------------------------------

데이터 처리 방법

 - 바이트
 - 문자
 - 버퍼

바이트 기반 스트림의 특징 : 입력 : InputStream , 출력 : OutputStream

문자 기반 스트림의 특징 : 입력 : reader , 출력 : writer


--------------------------------------------------------------------------------------------------------

// 바이트 기반 -> 중간 과정을 눈으로 확인하지 않아도 되는 작업에 사용하면 좋다. ex) 파일 복사 (바이트가 복사되는걸 눈으로 확인하지 않아도 되고 복사가 완성된 파일을 보면 되니까..)
FileInputStream fis;	//파일을 대상으로 한 바이트 기반의 입력 스트림
FileOutputStream fos;  //파일을 대상으로 한 바이트 기반의 출력 스트림
InputStreamReader is; //기존에 존재하는 바이트 기반의 입력 스트림에 덧붙여 사용
OutputStreamWriter os;
//결론 : 모든 스트림의 기반 스트림은 바이트 기반 스트림이다 !! 
//바이트 기반의 스트림만 존재한다면 얼마든지 , 문자기반으로 업그레이드 할 수 있음.

--------------------------------------------------------------------------------------------------------

//파일을 대상으로 한 문자기반 입력 스트림 (문자를 이해, 문자 안깨짐 - 한 바이트씩 읽는게 아니라 
문자 단위로 읽기때문에, 복사작업에 사용 x, 바이트기반이 근본이고 더 많은 일을 함)

--------------------------------------------------------------------------------------------------------

모든 프로그래밍 언어에서는 os가 이미 제공하는 표준 스트림에 대해서
개발자가 직접 생성 및 관리하지 않아도 된다.. 왜? 이미 os 부팅시 부터 준비가 되어 있으므로 !!

자바에서 우리가 지금까지 써왔던 System.out 은 표준출력스트림이므로 그냥 가져다 쓰면 됨 !! 

System.in 을 이용하면 키보드로부터 들어온 데이터를 입력받을 수 있다..

주의 사용 후 우리것이 아니므로 닫지 않는다...

InputStream is = System.in; // 입력 스트림의 최상위 객체인 그냥 입력 스트림을 말함.

--------------------------------------------------------------------------------------------------------

스트림이 들이마시기 전에 주먹에 모아놓음. 그 주먹을 Buffer 라고 함.

효율성을 떠나, 한글이 깨지지 않고 나오게 하기 위해 기존 스트림에 문자 기반 스트림을 덧씌우자 !! 
 --> 한글자씩 읽는건 변함 없음 ! 

한줄을 만날때 까지는 입력을 보류하다가, 한줄의 끝인 줄바꿈 특수문자를 만나면 그제서야 한 번
읽어들이는 , 즉 버퍼를 ㅣ용한 문자열 처리 전용 입력스트림으로 업그레이드 !! 

FileInputStream fis;
InputStreamReader reader;
BufferedReader buffr;

fis = new FileInputStream(name);	
reader = new InputStreamReader(fis);
buffr = new BufferedReader(reader);

빨대 3단 조립 !!! 
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

