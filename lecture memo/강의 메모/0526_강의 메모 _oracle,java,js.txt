
--------------------------------------------------------------------------------------------------------

수업 시작.

Java 수업 시작 !! 


--------------------------------------------------------------------------------------------------------

Select 문 수행하기.

다른 언어와 달리 Connection 객체는 접속이 성공되면 , 메모리에 올라오는 결과물.
즉 접속 정보를 가진 객체이며 , 접속 시도 객체가 아님 !!! 



--------------------------------------------------------------------------------------------------------

각 유저별 접속 허용 정보 알아보기 !!

use mysql;
desc user;
select user, host from user;

유저 만들기

create user 'java' @'%' identified by '1234';
(@'이 안에 localhost라 치면 해당 컴퓨터만 , %를 넣으면 ip만 넣으면 접속 가능.')

grant all privileges on dev.* to 'java'@'%' with grant option;
(모든 권한 부여)

--------------------------------------------------------------------------------------------------------

Connection con = null; // finally에서 닫기 위해서는 try의 지역변수이면 안됨. 멤버변수로 빼기.

PreparedStatement pstmt; //query 수행 객체 , 쿼리문 마다 1:1 대응 됨.
			//3개의 쿼리를 수행할 경우 , 3개 만듦


pstmt = con.prepareStatement(sql);

ResultSet rs = pstmt.executeQuery();

최초에 rs를 생성한 시점에는 커서가 첫번재 레코드보다 위에 위치.

rs.next();  -> 커서 한칸 전진

rs.getString("ename"); -> 현재 커서가 위치한 곳에서의 ename 컬럼 값을 가져옴.

while(rs.next()) {
						
		String ename = rs.getString("ename");
		int sal = rs.getInt("sal");
		String job = rs.getString("job");
		String hiredate = rs.getString("hiredate");
		System.out.println("ename = "+ename+", sal= "+sal+", job= "+job+", hiredate= "+hiredate);
}
--------------------------------------------------------------------------------------------------------

쿼리실행 -> DML = insert, update, delete 
	    DDL = create , drop , alter

자바의 경우 , DML과 DDL 에따라 메서드가 달라짐.

DML,DDL : executeUpdate() , select executeQuery()
--------------------------------------------------------------------------------------------------------

JTable 수업 시작 !!

JScroll 생성 후 그 안에 테이블 집어 넣기 !! 

JScrollPane scroll
JTable

------------------------------------------------------------------------------------------------------
pstmt = con.prepareStatement(sql); //쿼리 수행 객체 생성
				
rs = pstmt.executeQuery(sql); //select 문은 ResultSet으로 결과를 반환
				
//rs가 데이터 베이스 연동 결과이므로 , 바로 이 시점이후부터 배열의 크기를 결정지을 수 있음.

자바뿐 아니라 , 대부분의 언어에서의 배열은 선언시 반드시 그 크기를 결정해야 함.

--------------------------------------------------------------------------------------------------------

rs.last(); //레코드 내에서 마지막 행으로 이동

그러나 커서를 업그레이드 해주지 않으면 안됨.


pstmt = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

ResultSet의 타입을 스크롤로 바꾼 뒤 , 읽기 전용으로 설정 !! 

ResultSet.TYPE_SCROLL_INSENSITIVE 
-> 커서가 전방향 , 후방향 , 건너뛰기 가능한 , 즉 커서의 위치를 자유자재로 조절 가능한 옵션

READ_ONLY 로 하는 이유 
-> WRITE로 적어버리면 , DB 서버에 있는 컬럼도 같이 바뀌어 버리므로 100이면 100 읽기전용으로 셋팅 ! 
--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

