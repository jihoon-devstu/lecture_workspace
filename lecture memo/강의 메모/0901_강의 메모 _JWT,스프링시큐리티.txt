
--------------------------------------------------------------------------------------------------------

수업 시작.

모놀리식 -> MSA 

MSA
Spring Security
JWT


--------------------------------------------------------------------------------------------------------

- Spring framework 다루는 분야
- 보안(로그인 처리)

[전통적인 모습]
로그인폼 --> DB연동 --> 존재 한다면 세션에 담음..

--------------------------------------------------------------------------------------------------------

스프링 시큐리티가 지원하는 로그인 처리 시작 ! 

스프링이 자동으로 로그인을 처리.
  - 로그인폼은 Spring 지원 (쓰기 싫으면 개발자가 커스텀) 
	-> 호출 주소 : (~/login)
  - 아이디 , 패스워드는 누가 정함? ( 아이디 = user , 비밀번호 = 가동시 자동 제공 해시값 (콘솔에 뜸))
  - 로그인 성공 후 어떤 페이지 보여줌 ? 무조건 / redirect 하므로 , 개발자가 로그인 후 보여줄 페이지가 있다면 
  - Controller에서 /로 매핑 걸어야함

--------------------------------------------------------------------------------------------------------

    스프링 시큐리티가 기본적으로 제공하는 폼 로그인 기능에서는 , 로그인 성공 시
    Root 로 Redirect 되어 있기 때문에 , 로그인 성공 후 보여질 내용이 있다면
    Controller에서 매핑을 처리해야 함.

--------------------------------------------------------------------------------------------------------

1. UsernamePasswordAuthenticationFilter

	-> 로그인 폼에서 전송된 Post 요청을 감지하고 요청을 가로채어 username 과 password 파라미터 값을 추출.
	-> id , password 정보를 추출하여 UsernamePasswordAuthenticationToken 객체 생성 후 AuthenticationManager에게 전달

--------------------------------------------------------------------------------------------------------

2. AuthenticationManager
	
	-> 적절한 AuthenticationProvider 객체를 선택하여 인증을 맡김
	-> 여기서 AuthenticationProvider 객체란 , DB에 저장된 암호화된 비밀번호와 일치하는지 여부를 확인함.

	-> 즉 , 검증을 개발자가 직접하는 것이 아니라 , 이 AuthenticationProvider 객체가 대신 해 주는데 
	-> 이때 , AuthenticationManager는 인증 작업을 AuthenticationProvider 에게 위임한다.

--------------------------------------------------------------------------------------------------------

3. AuthenticationProvider

	-> 이 객체는 비번 검증을 담당하는데 보통 DaoAuthenticationProvider 을 사용.
	-> 인증 성공 후엔 Authentication 객체 생성
	-> UserDetails 객체 (사용자 정보) 생성


--------------------------------------------------------------------------------------------------------

    스프링 시큐리티에 의해 인증이 성공되면 , 사용자 정보는 UserDetails 객체에 들어있음.
    이때 , User Details 객체를 꺼내는 방법은 총 4가지 방법이 있음.

1. 세선에서 직접 꺼내기

2. AuthenticationPrincipal 어노테이션 활용

3. SecurityContextHolder 직접 사용

4. 컨트롤러 메서드에서 Principal  객체 주입받기.


--------------------------------------------------------------------------------------------------------
1. @AuthenticationPrincipal	
컨트롤러 파라미터	
가장 간결하고 현대적인 스프링 방식. 
UserDetails 객체를 바로 주입받아 타입 변환이 필요 없다.	
컨트롤러에서 사용자 정보가 필요할 때 가장 추천.

2. SecurityContextHolder	
모든 곳	
가장 근본적인 방법. 
컨트롤러, 서비스, 필터 등 계층에 상관없이 어디서든 호출하여 사용할 수 있다.	
서비스 계층 등 컨트롤러가 아닌 곳에서 정보가 필요할 때.

3. Authentication 객체 받아와서 꺼내기
HttpSession 에서 받아오는 과정 생략

4. HttpSession 에서 직접 꺼내기
컨트롤러, 필터	
가장 원시적인 방법. 
코드가 길고 HttpSession에 직접 의존하게 되어 좋은 방식은 아니다.	
거의 사용하지 않음. 
학습 목적으로 원리를 이해할 때 좋다.


--------------------------------------------------------------------------------------------------------

BCryptPasswordEncoder

-> salt 를 적용하여 비밀번호를 암호화 시켜주는 객체
-> 내부적으로 slat를 사용하므로 , 같은 문자열 일지라도 , 
     매번 생성할 때 마다 암호화 결과물은 매번 바뀐다.

--------------------------------------------------------------------------------------------------------

UserDetails 

* 로그인 검증이 성공 되면 Authentication 객체가 생성되고 , 이 객체에
* UserDetails 객체가 등록된다
* 로그인에 성공한 사용자 정보를 보유한 객체

--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

