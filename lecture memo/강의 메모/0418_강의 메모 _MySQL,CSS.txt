0418 강의 메모 _CSS,MySQL,

--------------------------------------------------------------------------------------------------------

SQL의 유형 

1. DDL - 데이터베이스의 구조(스키마)를 정의하거나 변경할 때 사용
CREATE , ALTER , DROP , TRUNCATE

2. DML - 테이블에 데이터를 넣거나 , 수정 및 삭제할때 사용
INSERT , UPDATE , DELETE

3. DCL - 사용자 권한을 제어하거나 보안을 관리할 때 사용
GRANT , REVOKE

--------------------------------------------------------------------------------------------------------

열 : column - column명 (열의 가장 윗줄 이름)
행 : row 
값 : value 

한 줄의 (한 사람의) 데이터를 레코드라고 한다.

테이블 -> 데이터베이스(스키마) -> DBMS 서버

스키마 란?
 - 데이터베이스는 전산적(물리적) 관점의 용어
 - 스키마는 개념적인 관점의 용어
 - 테이블, 뷰, 인덱스, 제야 ㄱ조건 등 객체들을 논리적으로 묶어놓은 공간, 단위
 - 서로 다른 스키마에 존재하는 객체들은 이름이 중복되어도 괜찮음. (서로 다른 디렉토리)
 - MySQL에서는 데이터베이스가 곧 스키마. 따라서 1개의 데이터베이스 파일에 스키마 1개
 - 단, 오라클에서는 User 단위로 스키마가 부여, 
   하나의 데이터베이스에 여러 유저가 존재할 경우 여러 개의 스키마가 존재할 수 있음.

--------------------------------------------------------------------------------------------------------

MySQL의 특징

 - 오픈 소스 (보통 테스트할 때 쓰며 , 정식일 땐 돈주고 삼)
무료로 사용 가능, 소스 코드도 수정 가능 (GPL 라이센스)

- 관계형 데이터베이스
데이터 테이블 형태로 저장, 테이블 간 관계를 정의할 수 있음.

- SQL 지원
표준 SQL 언어를 사용하며 데이터 질의 및 조작 가능

- 다양한 운영체제 지원
윈도우,맥,리눅스 등 다양한 OS에서 실행 가능

- 가볍고 빠른 성능
설치와 실행이 간편 , 응답 속도가 빠름 (오라클은 무거움)

- 다중 사용자 동시 접속
여러 클라이언트 동시에 서버 접속 및 데이터 공유 가능

- 다양한 스토리지 엔진
InnoDB(요새 이거만 씀) , MyISAM(안씀) 등 다양한 방식으로 데이터 저장 방식 선택 가능

- 안정성 및 보안
사용자 인증 , 권한 제어 등 보안 기능 제공

--------------------------------------------------------------------------------------------------------

Mysql 실습 시작.

1. mysql 깔린 폴더 가서 주소창에 cmd 치기

2. mysql -h localhost -u root -p 원격지의 mysql 서버 접속

3. use dev; // 내가 사용할 데이터 베이스 선택

4.  설치된 2개의 테이블
	dept : 어떤 회사의 부서
	emp : 어떤 회사의 사원들

5. 부서 테이블의 모든 정보를 출력하시오
select *from dept;
(*란 모든 컬럼을 의미)

6. 사원 테이블의 모든 정보를 출력하시오
select *from emp;

7. 담당업무가 SALESMAN인 사원들의 이름, 급여, 담당업무를 출력하시오
	SELECT ENAME, SAL, JOB
 	from EMP 
	where job='salesman';

8. 사원의 이름과 급여를 출력하되, 급여를 기준으로 오름차순으로 정렬하세요
	SELECT ENAME, SAL
	from emp
	order by sal asc;
9. 급여가 2800보다 큰 사원의 이름, 급여, 업무를 출력하시오
	SELECT ENAME,SAL,JOB
	from emp
	where sal > 2800
--------------------------------------------------------------------------------------------------------
예제 시작 

1. 모든 사원의 정보를 출력하세요

SELECT *from emp;
--------------------------------------------------------------------------------------------------------
2. 사원의 이름과 급여를 출력하세요

select ename, sal
from emp;
--------------------------------------------------------------------------------------------------------
3. 부서 번호가 10번인 사원의 이름과 급여를 출력하세요

select ename, sal
from emp
where deptno='10';
--------------------------------------------------------------------------------------------------------
4. 급여가 3000 이상인 사원의 이름과 급여를 출력하세요

select ename, sal
from emp
where sal>3000;
--------------------------------------------------------------------------------------------------------
5. 직무가 MANAGER인 사원의 이름과 입사일을 출력하세요

select ename, hiredate
from emp
where job='MANAGER';
--------------------------------------------------------------------------------------------------------
6. 급여가 1000 이상이고 3000 이하인 사원의 이름과 급여를 출력하세요

select ename, sal
from emp
where 1000 <= sal and sal <= 3000;
--------------------------------------------------------------------------------------------------------
7. 급여가 2000보다 작거나 커미션이 500이상인 사원을 출력하세요

select ename
from emp
where 2000 > sal or comm > 500;
--------------------------------------------------------------------------------------------------------
8. 이름이 A로 시작하는 사원의 모든 정보를 출력하세요

select ename
from emp
where ename like 'a%';

--------------------------------------------------------------------------------------------------------
9. 커미션이 NULL이 아닌 사원의 이름과 커미션을 출력하세요

select ename, comm
from emp
where not comm="null" ;

select ename, comm
from emp
where comm is not null ;
--------------------------------------------------------------------------------------------------------
10. 직무가 SALESMAN인 사원의 모든 정보를 출력하세요

select *from emp
where job = 'salesman' ;
--------------------------------------------------------------------------------------------------------
11. 모든 부서의 정보를 출력하세요

select *from dept; 
--------------------------------------------------------------------------------------------------------
12. 사원의 급여에 10%를 더한 값을 출력하세요

select sal*1.1 from emp;

select sal + (sal*0.1) from emp; 

select sal + (sal10/100) from emp;

select sal + round(sal*0.1) from emp;
--------------------------------------------------------------------------------------------------------
13. 모든사원의 입사일을 기준으로 오름차순으로 정렬하세요

select hiredate
from emp
order by hiredate asc;
--------------------------------------------------------------------------------------------------------
14. 모든 사원의 급여를 기준으로 높은 순으로 정렬하세요

select sal
from emp
order by sal desc;
--------------------------------------------------------------------------------------------------------

DML

테이블 복사하기

create table emp2
as
select *from emp;

create table dept2
as
select *from dept;
--------------------------------------------------------------------------------------------------------
부서정보에 다음의 데이터를 넣거나 빼거나 수정하기

레코드 1건 넣기
insert into dept2 (deptno, dname, loc) values (50,'secret', 'seoul');

레코드 1건 삭제
delete from dept2 where deptno = 10 ;

레코드 1건 수정
update emp2 set job='분석' where empno=7788;

--------------------------------------------------------------------------------------------------------
[ DDL - 존재와 관련된 쿼리문 생성, 소멸, 변경]
실습을 위해 emp2 , dept2 날려버리기

drop table emp2
drop table dept2

3. update dept2 set job='세일즈' where deptno='see30';
4. update emp2 set sal='3500' where ename='ward';
5. update emp2 set ename='회장', set sal = 9000, comm = 5000 where empno 7839
6. delete 

--------------------------------------------------------------------------------------------------------
부서 테이블 생성/레코드 넣기

create table dept(
deptno int primary key auto_increment
,dname varchar(14)
,loc varchar(13)
);
 
insert into dept(deptno,dname,loc) values(10,'ACCOUNTING','NEW YORK');
insert into dept(deptno,dname,loc) values(20,'RESEARCH','DALLAS');
insert into dept(deptno,dname,loc) values(30,'SALES','CHICAGO');
insert into dept(deptno,dname,loc) values(40,'OPERATIONS','BOSTON');



사원 테이블 생성/레코드 넣기

use dev; // 내가 사용할 데이터 베이스 생성 후에 테이블 붙여넣기 ! 

create table emp(
empno int primary key auto_increment
,ename varchar(10)     
,job varchar(9)         
,mgr int
,hiredate timestamp
,sal int
,comm int
,deptno int
);

insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7369,'SMITH','CLERK',7902,'80/12/17',800,20);
insert into emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) values(7499,'ALLEN','SALESMAN',7698,'81/02/20',1600,300,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) values(7521,'WARD','SALESMAN',7698,'81/02/22',1250,500,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7566,'JONES','MANAGER',7839,'81/04/02',2975,20);
insert into emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) values(7654,'MARTIN','SALESMAN',7698,'81/09/28',1250,1400,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7698,'BLAKE','MANAGER',7839,'81/05/01',2850,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7782,'CLARK','MANAGER',7839,'81/06/09',2450,10);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7788,'SCOTT','ANALYST',7566,'87/04/19',3000,20);
insert into emp(empno,ename,job,hiredate,sal,deptno) values(7839,'KING','PRESIDENT','81/11/17',5000,10);
insert into emp(empno,ename,job,mgr,hiredate,sal,comm,deptno) values(7844,'TURNER','SALESMAN',7698,'81/09/08',1500,0,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7876,'ADAMS','CLERK',7788,'87/05/23',1100,20);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7900,'JAMES','CLERK',7698,'81/12/03',950,30);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7902,'FORD','ANALYST',7566,'81/12/03',3000,20);
insert into emp(empno,ename,job,mgr,hiredate,sal,deptno) values(7934,'MILLER','CLERK',7782,'82/01/23',1300,10);


--------------------------------------------------------------------------------------------------------

CSS 2번째 시간시작

(어제 시간 복습)

 [HTML]

1)  정의 : 하이퍼링크가 가능한 마크업 기반의 언어
 불편하다. (위짓 메뉴가 없어서)

2) 태그
마크업에 사용되는 표기법
1. 쌍으로 존재.
2. img, audio, video - 브라우저 실행시 , 미디어가 그 자리에 대체됨.
   - replacement element (대체 요소)
   - void element (빈 요소) - <br>

3) 문서구조
 <html> : 문서의 시작과 끝을 알리는 태그(브라우저에게)
 <head> : 문서의 설정, 제목, 메타 정보 등
 <body> : 문서의 내용 작성


 [CSS]

1) 정의 : HTML 을 미적으로 보완하기 위한 기술
    - 요소의 색상, 글꼴, 여백, 배치, 애니메이션 등을 지원

2) 집중해서 배워야 할 것들
 - 선택자 : 제이쿼리 때문에 많이 알아야 함.
 - 웹페이지 레이아웃 : 프로젝트 진행 시 필요함.

3) 주요 기능

- 레이아웃 제어 (요소의 위치 지정) position , flexbox , grid
- 색상 및 배경 (텍스트 색상, 배경색, 배경 이미지 설정) color, background
- 텍스트 스타일 (글꼴 , 크기, 줄 간격 설정) font-family, font-size, line-height
- 여백 조정 (요소 간 간격) margin , padding
- 테두리 및 그림자 (박스 테두리, 그림자 효과) border, box-shadow
- 애니메이션 및 트랜지션 (요소의 움직임과 효과) animation , transition
- 반응형 디자인 (다양한 기기에서 최적화) media queries, flexbox

--------------------------------------------------------------------------------------------------------

선택자란?
 - css 적용 대상이 되는 요소를 선택하기 위한 지정자
 - 선택자를 잘 활용하면 효율적으로 대상 지정 가능.
--------------------------------------------------------------------------------------------------------
기본 선택자
 * 전체 선택자  = *
 * 태그 선택자  = <>
 * 클래스 선택자  = (.클래스명) 
 * 아이디 선택자  = (#아이디)
   - ID 부여 및 선택 : <a href="링크" id="아이디명">
--------------------------------------------------------------------------------------------------------
그룹 및 조합 선택자
 * 그룹 선택자 (A, B) <style> h1,p,span {color: blue;} </style>
 * 자식 선택자 (A > B) 
 * 후손 선택자( A B)
 * 형제 선택자 (A+B)
 * 일반 형제 선택자 (A ~ B)
--------------------------------------------------------------------------------------------------------
속성 선택자
attr
지정된 속성을 가진 요소 선택
attr = "값"
지정된 속상값과 일치하는 요소 선택
attr^ = "값"
지정된 속성값으로 시작하는 요소 선택
attr$ = "값"
지정된 속성값으로 끝나는 요소 선택
attr* = "값"
지정된 속성값을 포함하는 요소 선택
--------------------------------------------------------------------------------------------------------
가상 클래스 선택자

:hover 
마우스를 올렸을 때

:focus
요소를 클릭하여 포커스 됐을때

:nth-child (n) 
n번째 자식 요소 선택
***** n+1 , 2n-1 , even , odd 등 사용 가능.

:first-child 
첫번째 자식 요소

:last-child
마지막 자식 요소

:not(selector)
특정 선택자를 제외
--------------------------------------------------------------------------------------------------------
가상 요소 선택자

::before 
요소의 앞에 가상 요소 추가
::after
요소의 뒤에 가상 요소 추가
::first-letter 
첫 글자 스타일 적용
::first-line
첫 줄 스타일 적용
--------------------------------------------------------------------------------------------------------
제일 안쪽 = 컨텐트
안쪽 여백 = 패딩
테두리 = border
바깥쪽 여백 = 마진

--------------------------------------------------------------------------------------------------------





















