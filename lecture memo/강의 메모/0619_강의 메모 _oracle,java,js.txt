
--------------------------------------------------------------------------------------------------------

수업 시작.


서블릿 : 자바의 클래스 중 오직 javaEE 기반의 서버에서만 해석 및 실행될 수 있는 클래스
서블릿은 개발자가 인스턴스를 생성하는 방법이 아니라, 개발자는 그냥 클래스 작성 후
서버에 올려놓으면 된다... 그런 후, 최초 요청에 의해 인스턴스가 한번 올라간다 (by tomcat)

--------------------------------------------------------------------------------------------------------
서블릿이 언제 태어나고 , 어떤 일을 수행하며 , 언제 소멸하는지에 대한 하느의 주기를
서블릿의 Lifecycle이라 한다....

서블릿의 생명주기 관련 메서드

1) init()  : 서블릿이 태어날 때 초기화를 위해 호출되는 메서드(call by tomcat) _ 서버에 의해

2) serveic() : 서블릿이 클라이언트의 요청을 처리할때 호출되는 메서드 (call bty thread)

3) destroy() : 서블릿이 소멸될 때 호출되는 메서드 (call by tomcat)


--------------------------------------------------------------------------------------------------------

서블릿은 클라이언트의 요청을 처리하기 위해태어났으므로
이요청 처리를 담당하는 메서드가 바로 service()이다.

고객의 요청을 처리하려면 뭘 원하는지에 대한 요청 정보와 그 요청에 대한 응답 정보를
가지고 있어야한다.

--------------------------------------------------------------------------------------------------------

서블릿의 service() 메서드에서 , 먼저 요청을 받아 , 클라이언트의 HTTP 요청 받식이 get이면
doget()메서드가 , post이면 dopost() , put doput() , delete이면 dodelete()
doxxx() 형 메서드를 호출한다. 따라서 개발자는 실제적인 로직을
doxxx형을 오버라이드하여 처리.

요청을 마무리 짓는 단계에서 , 고객에게 보여야할 응답 정보를 구성하자.

--------------------------------------------------------------------------------------------------------

서블릿은 서버 측에서 수행되는 자바 클래스로서 아주 필수적인 기술이다 !!! 

치명적 단점 : 디자인 표현 시 html 태그를 모두 문자열로 처리해야 한다....
	-> asp,php 와 경쟁이 될 수 없다 !!
	-> 이 방법을 타파하기 위해 JSP !!

JSP -> asp , php 처럼 html과 프로그램 코드를 함께 작성할 수 있는 jsp로 디자인 표현



--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

