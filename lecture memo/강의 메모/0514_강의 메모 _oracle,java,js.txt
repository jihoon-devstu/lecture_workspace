
--------------------------------------------------------------------------------------------------------

수업 시작. 어제 복습

[JS] 

1. 클래스 (재사용성,거푸집) vs 객체형 리터럴 (그 자체가 인스턴스)

2. JSON 문자열 {"키값":벨류값}

3. 내장 객체
 - Array
 - Date
 - String
 - JSON ( 객체  <--->  JSON 
	parse()	     stringify()

4. Open API (정해진 규칙 따라야함. 구글맵 호출을 위한 정해진 코드 등)
	
--------------------------------------------------------------------------------------------------------

[JAVA]

1. API document (프로그래밍 사용 설명서)
 - class만 교환하면 서로 무엇을 만들었는지 알 수 없으므로 잘 만들어야함
 - Object = 변수 , 함수

2. encapsulation (캡슐화)
 - 클래스 작성 시 데이터는 private 보호하고 , 이 데이터에 대한 접근 방법은
   메서드를 통해 지원하는 클래스 정의 기법

3. Has a 관계
 - 모든 사물은 서로 조합되어 있다
 -> has a 관계 (클래스가 다른 클래스를 멤버로 보유한 관계)
 class Dong{
	int age = 3;  //has a 관계 아님
	String name = "뽀미";  //String는 객체이므로 has a 관계임
}

 -모든 사물은 서로 부모,자식 관계에 있다. 
 -> is a 관계


--------------------------------------------------------------------------------------------------------

[DB_Oracle]

1. Foreign key (왜래키)
  - 자식 테이블은 오직 존재하는 부모의 pk값만을 입력할 수 있음.
    만일 그 이외의 값을 넣으면 제약조건 위반으로 거부됨.
  - 자식이 부모를 외래키로 보유하면 해당 테이블은 삭제 불가능.

2. ERD (Entity Relation Diagram)

  ERD 설계 단계에서는 프로젝트에 사용할 DB 기종을 선택하지 않음.
  중릭적이어야하기 때문에.

--------------------------------------------------------------------------------------------------------

[Java]  "상속자" 수업 시작

OOP에서 클래스 정의시 중복되는 코드의 재사용을 위해서 상속이라는 클래스 정의법 이용 가능.

parent : GUI 프로그래밍에서 컨테이너를 뜻함  <----> child

super : 상속 관계에서의 부모 객체 <----> sub

public class Asian extend Human

-> extends 선언에 의해 부모가 보유한 멤버변수와 메서드가 자식이 물려받음.



--------------------------------------------------------------------------------------------------------

[JS] "상속자" 수업 시작 _ 게임 만들기

ES6 부터는 클래스뿐 아니라 상속까지도 java언어와 흡사하게 지원

그러나 js와 java는 둘다 상속관계에서 자식의 인스턴스가 초기화 되기 전에 
부모의 인스턴스 초기화가 앞서야 함은 동일하지만

js는 개발자가 자식의 클래스에서 생성자를 정의만해도
무조건 부모의 생성자 호출을 의무사항으로 명시함.

따라서 자식의 constructor(){}를 작성할땐 항상 부모의 컨스트럭터 호출을 해야함.
super();

--------------------------------------------------------------------------------------------------------

js에서는 생성자를 작성하기만 하면 , 무조건 생성자내에서
super() 명시해야한다 !!
주의) 부모님의 생성자에 매개변수가 있다면, 그에 맞게 호출




--------------------------------------------------------------------------------------------------------
[DB 오라클 수업 시작]

SQLPLUS SYSTEM /1234

CONN JAVA /1234

SELECT TABLE_NAME FROM USER_TABLES;
SELECT SEQUENCE_NAME FROM USER_SEQUENCES;



--------------------------------------------------------------------------------------------------------

-- 동물 정보 입력

insert into animaltype(animaltype_id, type_name) 
values(seq_animaltype.nextval, '고양이')

--------------------------------------------------------------------------------------------------------

-- 보호자 정보 입력

insert into owner(owner_id, owner_name,phone) 
values(seq_owner.nextval, '구지훈', '010-1234-1234');

insert into owner(owner_id, owner_name,phone) 
values(seq_owner.nextval, '조완', '010-5678-5678');

insert into owner(owner_id, owner_name,phone) 
values(seq_owner.nextval, '정재환', '010-4455-4455');

--------------------------------------------------------------------------------------------------------

-- 펫 정보 추가 입력

insert into pet (pet_id, pet_name, age, owner_id, animaltype_id) 
values(seq_pet.nextval, '꾸릉이' , 3, 1, 2);

--------------------------------------------------------------------------------------------------------

-- 정규화에 의해 테이블을 분리는 잘 시켰으나 , 막상 테이블을 조회하면 fk값이 뭔지 알수가 없다.
따라서 마치 하나의 테이블처럼 레코드를 가상으로 조회를 하는 것을 조인이라 한다.

select *from pet p, owner o
where p.owner_id = o.owner_id;

--------------------------------------------------------------------------------------------------------
1. 소속된 총 사원의 수가 5명 이상인 부서의 부서번호 , 소속 사원수를 출력하세요.
SELECT D.DEPTNO,COUNT(EMPNO) AS 소속사원수
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
GROUP BY D.DEPTNO
HAVING COUNT(EMPNO) >=5

2 SMITH가 소속된 부서의 총 사원수를 출력하세요
SELECT COUNT(EMPNO)
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO FROM EMP WHERE ENAME = "SMITH");

3 SMITH가 소속된 부서의 총 사원수 보다 , 소속 사원수가 더 많은 부서의 부서번호,부서명,부서위치를 출력


SELECT COUNT(EMPNO), D.DEPTNO
FROM EMP E INNER JOIN DEPT D
ON E.DEPTNO = D.DEPTNO
GROUP BY D.DEPTNO



--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

