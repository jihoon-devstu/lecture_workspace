
--------------------------------------------------------------------------------------------------------

수업 시작.

하위 컨트롤러가 3,4단계를 수행한 후 DispatcherServlet에게 정확한 파일명을 알려주는것이 아니라
파일의 일부 단서만 반환한다.(ModelAndView에 심어서...) 따라서 이 객체를 넘겨받은 DispatcherServlet은
일부 단서를 직접 해석하지 않고 , view에 대한 해석을 담당하는 전담객체인 resolver 에게 맡긴다.
이 View 영역을 전담하는 객체들을 가리켜 스프링에서는 ViewResolver라 한다.
 JSP 사용 시 주로 사용되는 ViewResolver 는 InternalResourceViewResolver

 예시) 하위 컨트롤러가 notice/list 를 심어서 보내면 --> /WEB-INF/views/notice/list.jsp


--------------------------------------------------------------------------------------------------------

ModelAndView 객체는 Model과 View를 합쳐놓은 객체임.
Model 객체에 정보를 담으면 request.setAttribute() 와 동일한 효과.
View에는 DispatcherServlet에게 전달할 페이지파일명이 아닌 , 이름을 전달
--------------------------------------------------------------------------------------------------------

스프링을 사용하는 이유는 기업용 애플리케이션 개발 시 , 개발자가 일일이 처리해야 하는 반복된 작업을 대신 해 주기 때문
스프링 이전 시대에는 이 작업을 EJB 기술이었음. (개발자가 욕하면서 씀)
규모가 큰 작업에서 개발자들의 반복된 작업을 대신하는 대표적 업무 (트랜잭션 처리, 로깅, 보안처리 등등)
JDBC 사용 시 데이터 소스가 결정됐다면(JNDI) 그 다음은 적절한 트랜잭션 매니저를 등록해야 함.

	- 사용 기술이 JDBC 기반 : DataSourceTransactionManager 객체를 등록해야하고
	- 사용 기술이 Mybatis 기반 : DataSourceTransactionManager 객체를 등록하고
	- 사용 기술이 Hibernate 기반 : HibernateTransactionManager 객체를 등록해야 함.
	->>> PlatformTransactionManager = 데이터소스트랜잭션매니저의 상위객체

1) 트랜잭션 개발자가 직접 처리하지 않아도 알아서 처리 
	-> commit , rollback 호출하지 않음

2) 어떠한 기술을 사용하더라도 , 코드에 변함이 없음 (일관된 코드)
--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

