
--------------------------------------------------------------------------------------------------------

JAVA 수업 시작.

MSA = 스프링으로 만든걸 분산해서 제공 (여기까지 배울 예정)

spring boot에서 끝나지 않고 , MSA까지 가보자.
시큐리티까지 갈 예정.

그러기 위해선 기존의 spring이 어떤식으로 이루어졌는지 알아야함.



JS,HTML,CSS - JAVA - JSP , 서블릿 - MVC - spring - spring boot , MSA , 시큐리티 

스프링까진 이클립스 , boot부턴 인텔리j 들어갈 예정. (유료 아이디 발급됨)
--------------------------------------------------------------------------------------------------------
클래스란 ? 

- 현실의 객체를 프로그래밍 언어로 표현해 놓은 단위
- 클래스는 사물 자체는 아니며 , 사물을 생성해 낼 수 있는 틀 또는 설계도

클래스의 구성 요소
- 클래스 안에 선언된 변수 = 사물의 상태를 표현하므로 속성(Property)이라 함
- 클래스 안에 정의된 함수 = 사물의 동작을 표현하거나 상태 값을 변화시키는 방식을 제공하므로
			메서드 (Method)라 함 

자바스크립트의 클래스
- ES6 (2015년 발표된 JavaScript) 부터 , JavaScript에서도 class , 생성자 및 상속과 같은 
  객체 지향적인 요소들이대거 도입 됨.

--------------------------------------------------------------------------------------------------------


class 안의 함수에선 this 를 활용.
let span; X
this.span;

this를쓰려면 생성자로 감싸야함.
constructor(){
}

상태를 명시하는것은 function 이 아닌 , method로 바뀜.

--------------------------------------------------------------------------------------------------------

원하는 수 만큼의 막대를 만들어서 부모에 부착하되 , 부모의 크기는 결정된 것이 아니라
자식의 크기와 수에 비례하여 결정하자. (동적으로 부여하자)
JavaScript 언어는 함수를 일급시민(first-class citizen) 취급
컴퓨터 공학에서 일급시민이란 어떤 대상을 일반 데이터처럼 취급할 수 있음을 말함.
즉, 자바스크립트는 함수를 변수에 담거나 , 함수를 매개변수 전달하거나
함수를 리턴도 할 수 있음.
function test (){}  함수선언문
let test = function(){} 함수표현식 
let test = () => {} 함수 표현식의 변형 , 화살표 함수
화살표 함수 내에서의 this는 상위스코프(영역)을 가리킴.

감속도 운동
A = parseInt(A)+a*(targetA-parseInt(A))+"px";
--------------------------------------------------------------------------------------------------------

java oop 시작 !

OOP (객체지향 언어) 란?

- 현실의 객체(사물 또는 개념 등)을 클래스로 표현 및 활용하여 개발하는 기법.

--------------------------------------------------------------------------------------------------------

절차지향과 OOP의 비교

- 절차지향 : 함수 중심의 프로그래밍 , 데이터와 함수가 분리

- 객체지향 : 객체 중심의 프로그래밍 , 데이터와 함수가 객체에 포함

--------------------------------------------------------------------------------------------------------

OOP의 장점

- 코드의 재사용성을 높이고 , 유지 보수성을 높여 대규모 소프트웨어 개발에 유리

--------------------------------------------------------------------------------------------------------

OOP의 특징

- 캡슐화 : 내부 데이터 보호 , 내부 구현 내용 숨기기
- 상속 : 기존 클래스의 재사용 , 코드 중복 최소화
- 다형성 : 같은 종류의 인터페이스로 다양한 동작 수행 가능
- 추상화 : 복잡한 정보는 숨기고 , 핵심적인 기능을 간략화하여 제공

--------------------------------------------------------------------------------------------------------

class 란? 
- 현실의 객체를 표현해놓은 단위
- 기존 절차지향 언어로도 객체를 표현할 수 있지만 , 변수와 함수가 분리되어 있어 코드 중복이 발생
- 객체지향 언어에서는 변수와 함수를 하나의 단위로 묶어놓은 클래스 활용, 많은 수의 객체 생성 가능

--------------------------------------------------------------------------------------------------------

property( 속성)
- 객체가 갖는 상태 , 클래스 내에 변수로 정의

--------------------------------------------------------------------------------------------------------

method(메서드)
- 객체가 수행할 수 있는 동작이나 객체의 상태를 바꿀수 있는 기능을 정의한 함수
--------------------------------------------------------------------------------------------------------

자바에서는 개발자가 정의한 클래스를 새로운 자료형으로 인정해준다. 따라서
	
class Dog{~~~}
	
Dog d = new Dog();
d.bark();

등의 자료형 선언 시 , 내가 정의한 class를 자료형으로 선언 가능.

--------------------------------------------------------------------------------------------------------

EditPlus에서 도구에서 컴파일 편하게 하기.

도구 - 사용자 도구 구성 - 
추가 - 컴파일 , javac.exe 경로 찾고 파일명 , 파일디렉토리 확인

--------------------------------------------------------------------------------------------------------

사용자 정의 자료형

- 개발자가 클래스를 정의한다는 것은 기존에 없던 새로운 자료형을 창조해내는 것으로 인정
- 따라서 클래스를 사용자 정의 자료형으로 봄
- 결국 Java언어에서 자료형은 무자,숫자,논리값 외에 클래스라는 자료형까지 4가지 유형이 있음.

-public static void main 

여기서 void란 해당 메서드의 return 값이 없다는 뜻.
--------------------------------------------------------------------------------------------------------

거푸집은 객체가 아니기에 접근 못함. 

class Duck {
	int age =5;
}

해놓았으면 그걸 사용하는 클래스도 따로 생성 해야 함

class UseDuck {
	public static void main(String[] args) {
		Duck d = new Duck();
		System.out.println(d.age);
	}
}
--------------------------------------------------------------------------------------------------------
Duck 클래스 자체는 오리를 생성할 수 있는 틀에 불과함. 자체 오리가 아님.

따라서 사용하려면 반드시 인스턴스 생성 후 해당 인스턴스 접근 필요.

--------------------------------------------------------------------------------------------------------
(1) 가격이 300이고 색상이 red인 자동차

class Car {
	int price = 300;
	String color = "red";
}
--------------------------------------------------------------------------------------------------------
(2) 비행 기능이 있고 기종이 보잉747 항공기

class Plane {

	String planetype = "보잉747";

	public void fly() {
		PlaneFly();
	}
}	
--------------------------------------------------------------------------------------------------------
(3) 이름이 Smith , 나이는 27인 미혼의 개발자


class Developer {
	String name = "Smith";
	int age = 27;
	boolean isMarried = false;
}
--------------------------------------------------------------------------------------------------------
(4) 점프하기 , 걸어가기 기능이 있고, 빨간색 옷을 입은 수퍼마리오


class Mario {

	String name = "SuperMario";
	String clothes = "red";

	public void jump(){
		SuperMario.jump();
	} 

	public void walk(){
		SuperMario.walk();
	} 
}
--------------------------------------------------------------------------------------------------------
(5) 현재 높이가 10이며 , 30개의 잎을 가지고 있으며 , 물을 주면 1씩 높이가 자라는 나무


class Tree {
	int height = 10;
	int leaves = 30;

	public void grow(){

		if(watering to tree) {
		height =+ 1
	}
}
--------------------------------------------------------------------------------------------------------
(6) 계좌 개설 은행은 하나은행 , 계좌주 이름은 Adams, 현재 잔고는 1000, 해당 계좌는 입금,출금 기능 지원


class Account {

	String bank = "하나은행";
	String accountHolder = "Adams";
	int currentBalance = "1000";

	public void withdrawal(){
		내계좌에서 돈 출금하기
	}

	public void deposit(){
		내 계좌로 돈 입금하기
	}
}
--------------------------------------------------------------------------------------------------------

