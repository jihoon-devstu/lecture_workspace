
--------------------------------------------------------------------------------------------------------

수업 시작.

웹소켓 수업 시작 !!


--------------------------------------------------------------------------------------------------------
웹소켓으로 채팅 서비스를 구현하는 방식은 총 2개.

1) 순수 웹 소켓

2) STOMP (Simple Text Oriented Messaging Protocol)
	- 메시지 전송을 위한 프로토콜
	- 메시지 내용이나 형식에 대한 규약이 없음
	-> 이러한 문제를 해결하기 위해 구독/발행 모델 도입 , 메시지 형식 표준화.
	-> 구독 서비스 (STOMP 프로토콜의 핵심 개념)

Spring 에서 지원하는 라이브러리 웹 소켓이용해보기.

--------------------------------------------------------------------------------------------------------

Chat Endpoint 란?

실시간 채팅 메시지가 오가는 통신 지점. (목적지)

--------------------------------------------------------------------------------------------------------

 * 웹 소켓을 구현하는 방법
 * 1. 순수 javaEE의 Api를 이용하는 방법
 * 2) Spring이 지원하는 API 이용하는 방법
 

 * 메시지 교환 방법
 * 1) 개발자가 직접 프로토콜을 설계하는 방법
 * 2) STOMP 프로토콜을 이용하는 방법
 *     - WebSocket 위에서 메시지를 주고받기 위한 메시지 프로토콜
 *     - 개발자가 직접 설계할 필요없다. 즉 편하다.

--------------------------------------------------------------------------------------------------------

List 는 중복을 허용함.

Set 은 중복을 허용 안함.

따라서 채팅에 들어오는 유저들에 대한 정보는 session 으로 관리 하나 , 그 유저들을 보여주기 위해

배열을 선언할 때엔 Set으로 하여 중복을 허용하지 않게 생성하자.


--------------------------------------------------------------------------------------------------------

세션.id 를 보내주는 이유

세션은 너무 많은 정보를 가지고 있으므로 세션자체를 보내주는게 아니라 id만 보내주자 ! 

--------------------------------------------------------------------------------------------------------

전통적인 for 문 (흐름을 다 제어하고 싶을 때.)

데이터를 대상 : 선언적 프로그래밍 (뭔갈 찾는다던가 등)

--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

