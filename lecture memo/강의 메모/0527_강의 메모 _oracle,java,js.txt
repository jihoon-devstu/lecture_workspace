
--------------------------------------------------------------------------------------------------------

수업 시작.

java 수업

--------------------------------------------------------------------------------------------------------

생성자에 이차원 배열 대입 방식은 불편...

생성하는 시점부터 언제나 데이터가 있어야 하는 전제조건이 
생성자의 인수에 이 테이블에 보여줘야할 데이터 또는 데이터처리 객체

JTable은 MVC패턴을 어느 정도 반영한 컴포넌트... (완벽하지 않음. 모델+컨트롤러)


JTable(TableModel dm)

MVC 패턴 = M (보여지지 않는 모델 일하는 영역) C (모델을 컨트롤하기 위한 영역) V(view 고객영역)

--------------------------------------------------------------------------------------------------------

JTable 은 개발 분야에서 전해 내려오는 많이 알려진 개발 방법(==패턴) 중 하나인 MVC 패턴을 구현한 컴포넌트.
하지만 완벽하진 않음. (M역할과 C역할을 동시에 하므로...) 
--> 데이터를 보유할 뿐만 아니라 , 그 데이터를 디자인 영역에 반영하는 코드도 포함되어 있기 때문에...

결론 ) 중요한 것은 JTable과 데이터를 분리시켜놓은 기술임

JTable은 껍데기에 지나지 않기 때문에 , 실제 보여질 데이터는 모델이 결정한다 !!! 

모델만 교체하면 된다 !! 

--------------------------------------------------------------------------------------------------------

getValueAt() 메서드는 getRowCount() 곱하기 getColumnCount() 수만큼 호출하면서
표를 이루는 각 셀(행,열)의 좌표 마다 어떠한 값을 넣을지 return이 결정한다.






--------------------------------------------------------------------------------------------------------

create table member4(
member4_id int primary key auto_increment
, id varchar(20)
, name varchar(16)
, tel varchar(20)
, regdate timestamp default now() 
);

--------------------------------------------------------------------------------------------------------

CRUD

create = insert

Update
Delete


--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

