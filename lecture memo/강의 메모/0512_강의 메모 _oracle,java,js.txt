
--------------------------------------------------------------------------------------------------------

JavaScript 수업 시작.


AIzaSyD9iucUM-R9F-KrRqMmZLaJ5C4KE_KmCpY

구글 맵 api 키

--------------------------------------------------------------------------------------------------------

자바스크립트의 변수에 담을 수 있는 데이터는

let x = 문자, 숫자, 논리값, 함수, 객체

2015년 ES6 이전의 js에서 객체를 정의하는 방법 중
함수의 생성자 , 객체 리터럴에 의한 객체 정의법도 고전적으로 지원되었었음.
key값 과 value값의 쌍으로 이루어짐.

class에 의한 객체 정의는 자체가 사용할 수 있는 객체가 아니라
거푸집이므로 사용하려면 반드시 인스턴스화 과정이 필요함, 결국 클래스의 사용목정은
'재정의'

아래 객체리터럴에 의한 객체 정의는 클래스가 아니라 자체가 인스턴스.

        let obj={
            name:"KING",
	age:30,
	move:function(){}
        }
	name : 키값
	"KING" : 벨류값



--------------------------------------------------------------------------------------------------------

객체지향 기술을 사용하기 이전에는 현실의 사물, 즉 객체를 담을때 주로 1차원 배열을 이용했다.
["scott" , 30 , " 서울"] 직관성이 떨어짐.. 그리고 객체를 표현했다고 보기에 부족함.

하지만 oop 언어는 객체를 표현한 언어이기 댸문에 일차원 배열 대신, 객체 리터럴도 표현이 가능함
따라서 index를 통해 접근하는 방법보다는 직관성이 있는 단어를 이용하기 때문에 현실 반영에 있어 훨씬 효율적임.

--------------------------------------------------------------------------------------------------------

쉼표를 기준으로 하여 , 문자열을 찢어보자.

"대한민국".indexOf("민")

.split(",") 

공백 제거

trim()

--------------------------------------------------------------------------------------------------------

JAVA 수업 시작

접근제한자

public = 외부에 있는 모든 코드가 이 메서드를 접근할 수 있음.
protected = 같은 패키지(디렉토리) 및 상속 관계에 있는 객체들이라면 접근 가능
default = default는 명시하는 게 아니라, 아무것도 적지 않았을때 적용됨.
private = 같은 멤버끼리만 접근가능

int x = 3; -> default 접근제한자 (같은 디렉토리만 가능, 자식이라도 같은 패키지 아니면 접근 금지) 

--------------------------------------------------------------------------------------------------------

void = 반환형이 없는 메서드

--------------------------------------------------------------------------------------------------------
오버로딩 (OverLoading)

- 프로그램 작성 시, 개발자는 변수와 메서드명에 상당한 공을 들여야함.
하지만, 개발을 하다보면, 비슷한 기능의 메서드임에도 불구하고, 메서드명 중복 금지라는
원칙을 너무 고수하면 , 메서드를 여러개 만들어야 하는 상황 발생...

효율성이 떨어지므로 java, c#등 oop의 경우엔 기능상 크게 차이가 없는 경우,
기존의 메서드명은 중복정의하는 기법을 지원하는데 , 이를 

메서드 오버로딩(OverLoading) : 메서드 중첩 기법

단 , 오버로딩을 인정받기 위해서는 아래의 조건을 만족해야 함

1) 메서드의 이름이 동일
2) 매개변수의 자료형이나 갯수가 달라야 함.
3) 반환형도 같아야함 (void , String 등)

--------------------------------------------------------------------------------------------------------
생성자 

<<<생성자도 메서드이다. 따라서 메서드 오버로딩의 원칙이 당연히 적용됨>>>

js에서 constructor() 생성자는 자바에서는 클래스명과 반드시 일치해야함. 
또한 반환형을 두어서는 안됨.

생성자 호출법 : new Cat()

생성자의 목적은 해당 객체가 클래스로부터 생성될 때, 다른 개성, 특성을 가진
객체로 생성하고 싶을 때 생성자를 적극 활용해야함.

--------------------------------------------------------------------------------------------------------

개발자가 만일 생성자를 정의하지 않으면, 컴파일러에 의해 디폴트 생성자가
정의되는데 , 이때의 관여는 최소한의 관여이므로, 디폴트 생성자의 {몸체}에
아무런 코드가 들어있지 않다... super()제외

컴파일러는 왜 개발자가 정의하지도 않은 디폴트 생성자를 넣어두는 것일까?

자바에서는 인스턴스 생성 시 new 연산자 뒤에 강제하고 있기 때문에
자칫 개발자가 생성자를 정의하지 않을 경우 , 없는 생성자 호출에 의해
인스턴스 생성과정에서 많은 컴파일 에러가 발생할 수 있음.

따라서 최소한의 에러만 나지 않도록, 컴파일 되도록 컴파일러 차원에서 생성자에 관여함.

--------------------------------------------------------------------------------------------------------

메서드 호출 시 , 주소값을 넘길 땐 (인스턴스 변수 , 참조값 등), 콜 바이 레퍼런스라고 함.


--------------------------------------------------------------------------------------------------------

다른 클래스를 사용하기 위한 클래스는 실행부를 정의해야함.

개발자가 패키지를 선언하면 javac -d 옵션 사용 시 선언한 패키지에 해당하는
디렉토리를 자동으로 생성해줌.

--------------------------------------------------------------------------------------------------------
1) ~~bin 환경변수 등록
2) editplus에 개발환경 구축
3) use 패키지 밑에 UseRose 클래스에서 bloom() 메서드 사용

testproject
	src - com 
		> sinse 
			> testproject
	bin




--------------------------------------------------------------------------------------------------------


1. src 폴더에 여러여러 폴더 만들어서 OO폴더 안에 XX자바 등록
2. 하나 뒤로 가서 use 폴더 안에 useXX자바 등록
3. bin 폴더만들고 환경변수 classpath 하나 만들어서 거기 주소 등록
4. 에딧 플러스로 와서 도구 2개 등록 



--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

