
--------------------------------------------------------------------------------------------------------

JAVA 수업 시작.

메인 메서드는 멤버가 아니다 !!!! ★

★ 컴파일 된 시점은 메모리에 할당되지 않음. (하드에 저장)
★ 실행할 시 , 메모리에 할당됨. 그때부터 3영역으로 나누어 관리됨.

JVM도 프로그램이므로, OS로 부터 메모리를 할당받으면 , 해당 메모리를 3개의 영역으로 
나누어서 관리함

왼쪽
method 영역 : 클래스 , 바이트 코드가 로드 되는 영역 (로드 시점은 실행할 때. java.exe)
(스태틱 영역)

가운데
stack 영역 
(스택 = 아래서부터 차근차근 쌓이는 구조)
-> 모든 지역변수가 쌓임.

오른쪽
heap 영역 
덩치가 큰 객체들 , (강아지 본체) 올라옴
--------------------------------------------------------------------------------------------------------

- java.exe 호출 시, main() 메서드는 자동 호출되는데
 이 때 개발자는 main() 메서드의 매개변수인 String 배열의 값을 넘길 수 있다.
 cmd > java 문자열1 문자열2 등

--------------------------------------------------------------------------------------------------------

클래스가 객체를 설계한 것이라면 , 실행 타임(=Runtime)시 메모리에 올라가는 객체 한 단위를 
"인스턴스" 라고 한다

--------------------------------------------------------------------------------------------------------

Car a=new Car() 에서 a에는 객체의 주소값이 담겨 있다. 이렇게 객체의 주소값을 가지는 변수를
"레퍼런스 변수" 라고 한다 = 참조변수

--------------------------------------------------------------------------------------------------------

객체 생성 후 프로그래머가 따로 메모리 관리를 해주지 않아도 자동으로 사용되지 않는
인스턴스들을 소멸시키는 JVM 의 메모리 청소 기능을
"가비지 컬렉션" 라고 한다.

--------------------------------------------------------------------------------------------------------

메인 메서드는 개발자가 직접 호출 할 수 없으며 명령 프롬프트에서 "클래스" 파일 실행시 자동 호출된다.

--------------------------------------------------------------------------------------------------------

레퍼런스 변수 값을 출력해보면 @형태의 데이터가 출력되는데 , 
이것은 그 객체의 값이 아니라 주소값이다.

--------------------------------------------------------------------------------------------------------

클래스에 생성되는 인스턴스가 메모리에 올라갈 때 클래스에 작성된 멤버 변수 중 인스턴스 변수는
각각의 인스턴스마다 할당되어 진다.

--------------------------------------------------------------------------------------------------------

JVM도 프로그램이므로 , "OS" 로부터 메모리를 할당받아 사용한다. 이때 JVM에서는 메모리를 
메서드 , 스택 , 힙 영역으로 분리하여 운영한다. 

--------------------------------------------------------------------------------------------------------

객체 생성시 프로그래머의 의도와는 상관 없이 new 연산자 뒤에서 무조건 호출되는 메서드는
"생성자" 라고 하는데 , 반드시 클래스명과 명칭이 동일해야한다. 절대로 반환형을 두어서는 안된다.

--------------------------------------------------------------------------------------------------------

현실의 사물(객체)를 Java언어로 모델링한 설계도를 "클래스"라 하며 , 이로부터 메모리에 생성된
객체 한 단위를 "인스턴스"라고 한다.

--------------------------------------------------------------------------------------------------------

같은 클래스 내에 작성된 변수를 멤버 변수 , 메서드를 멤버 메서드라 한다.

--------------------------------------------------------------------------------------------------------

클래스 코드는 JVM 메모리 영역 중 메서드 영역에 로드 되는데 , 로드 시점을 클래스를 실행할 때 이다.

--------------------------------------------------------------------------------------------------------

모든 메서드 내의 매개변수를 포함한 지역변수는 메서드 호출 시 JVM 메모리 영역중 스택 영역에 
생성 및 관리된다.

--------------------------------------------------------------------------------------------------------

Car a = new Car() 에 의해 생성된 Car 객체의 인스턴스는 JVM 메모리 영역 중 heap 영역에 생성 및 관리된다.

--------------------------------------------------------------------------------------------------------

1) O
2) O
3) O
4) X
5) O
6) O

Static 변수 = Class 변수

static 키워드를 사용한 변수는 클래스가 메모리에 로딩될 때 단 한번만 생성되며
특정 객체에 속하지 않고 , 클래스 전체에 속하게 된다.
따라서 클래스에 속한 변수라는 의미에서 클래스 변수라고 함.

스태틱 변수와 인스턴스 변수의 차이점에 대한 명확한 이해 필요 !!!

인스턴스 변수 = 객체가 생성될 때 마다 달라질 수 있음.
스태틱 변수 = 전체 클래스에 지정된 값. 클래스에 속하는 값이므로 객체가 바뀐다고 값이 달라지지 않음.
--------------------------------------------------------------------------------------------------------

클래스의 멤버변수는 컴파일러가 최소한의 관여 하지만
(int 의 경우 0 할당 , boolean의 경우 false 할당)

메인 메서드의 지역변수는 컴파일러가 관여하지 않음.


--------------------------------------------------------------------------------------------------------

모든 프로그래밍 언어에서 개발자가 사용할 수 있는 기본 자료형은 숫자, 문자, 논리값임.
그런데 A , B 등의 문자가 아닌 Korea는 문자의 배열이므로 String은 문자자료형이 아니라 클래스임.
우리는 일상에서 사용하는 문자열을 표현하려면 , 개발자가 배열을 사용해야 한다.
하지만 개발이 너무 불편하므로 현대적 프로그래밍 언어에서는 내부적으로 배열로 처리되지만
개발자들을 위해서 문자열에 대해서는 객체자료형으로 지원해준다.

①  String s1 = "korea";  
②  String s2 = new String("apple"); 

1번의 new를 명시하지 않아도 , 내부적 문자열 객체를 생성시키는 생성법을
암시적 , 묵시적 (implicit) 생성법이라 한다.
힙에 만들어 지되 , 상수풀을 만들어서 korea를 집어 넣는다.
(이전에 상수풀 안에 중복된 값이 있다면 새로 만들지 않는다.)

2번의 new 연산자를 이용하여 객체를 생성법을 그대로 따르는 문자열 생성법을
명시적 (explicit) 생성법이라 한다.
이 경우 apple 이라는 새로운 객체가 만들어진다. 따라서 다 각각의 값을 가진다

	
--------------------------------------------------------------------------------------------------------

primitive (기본 자료형) -> 값자체를 가짐
int, double, boolean 등

reference (참조 자료형) -> 주소값을 가짐
String , 배열 , class 등

--------------------------------------------------------------------------------------------------------

자바 메모리 구조에서 stack은 last input first output 으로 데이터가 관리되어 지며 , 
모든 지역변수는 이 stack에서 관리된다

--------------------------------------------------------------------------------------------------------

데이터 베이스 목록 조회
show databases;

데이터 베이스 선택
use dev;

선택된 데이터베이스 내의 존재하는 테이블 목록
show tables;

mysql에서 제약조건 부여하여 테이블 만들기
not null
default
unique
check
primary key

--------------------------------------------------------------------------------------------------------

중복된 데이터를 분리하는 작업을 정규화라고 함.

정규화란?
데이터베이스 테이블 설계 시, 중복된 데이터가 존재할 경우
무결성이 깨질 수 있으므로, 중복된 데이터는 별도의 테이블로 분리 시키는 설계 기법.

조인(JOIN)
정규화에 의해 물리적으로 분리된 테이블을 마치 하나의 테이블처럼 SELECT하는 쿼리 기법.

아래의 JOIN을 이용하면 아무런 조건이 없으므로 , N X M 의 레코드가 조합이 되므로
두 테이블의 공통이 되는 키값을 이용하여 조건을 부여하면 정상적으로 합쳐진다.
SELECT EMP.*, DNAME , LOC FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO;

SELECT *FROM EMP CROSS JOIN DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO;


*FROM 과
EMP.* FROM 외워두기 ! 
--------------------------------------------------------------------------------------------------------

