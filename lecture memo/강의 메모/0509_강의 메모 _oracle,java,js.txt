
--------------------------------------------------------------------------------------------------------

JavaScript 수업 시작.

내장객체 (built - in Object)
JS 자체적으로 개발자들에게 아주 유용한 기능을 모아 놓은 이미 내장되어 있는 객체 



--------------------------------------------------------------------------------------------------------

클래스와 인스턴스의 차이는 메모리에 올라와있는지 안올라와있는지의 차이.

객체 = 아래 모든걸 포함함.
클래스 = 메모리 안올라감
인스턴스 = 메모리 올라감

클래스: 집 설계도. 설계도만 보고는 살 수 없음.

인스턴스: 설계도로 지은 집. 실제로 존재하고 들어가 살 수 있음.

객체: 실제 집 그 자체. 인스턴스를 포함하는 넓은 개념.

--------------------------------------------------------------------------------------------------------

함수 선언식
-> function test(){}
호이스팅됨. (전체 코드의 맨 위로 끌어올려짐.)
스크립트 로딩시 즉시 생성 (함수 객체가 바로 메모리에 등록)

함수 표현식
-> let test = function() {}
호이스팅은 되지만 초기화되지 않아 변수처럼 취급됨.
코드 실행 중 해당 줄에서 생성됨.
변수는 호이스팅 되지만 함수 객체는 실행시에 메모리 할당됨
필요할 때 생성되므로 메모리 효율적

화살표 함수
let test =() => {}
호이스팅 안됨.
코드 실행 중 해당 줄에서 생성됨.
변수는 호이스팅 되지만 함수 객체는 실행시에 메모리 할당됨
필요할 때 생성되므로 메모리 효율적


--------------------------------------------------------------------------------------------------------

newDate();
표준시간.

getFullyear/Month/Date/Hours/Minutes/Seconds

--------------------------------------------------------------------------------------------------------

비동기 

console.log("a")
addEventListener("load",function(){
console.log("b")
});
console.log("c")

이 경우 , a c b 순서대로 출력됨. 순서대로 출력되지 않아서 비동기
--------------------------------------------------------------------------------------------------------

function test1 () {} - test1 정의
function test2 () {} - test2 정의

test1(); - test1 호출

test2 (test1); - 충돌 일어나서 ()안에있는 함수를 호출하므로 test1 호출

--------------------------------------------------------------------------------------------------------

addEventListener에서 두번째 매개변수로 들어가야 하는 함수는 호출이 아닌 정의를 해야함.

두번째 매개변수에 등록되는 함수는 개발자가 호출하는 함수가 아니라 , 브라우저가 load 이벤트를

발생 시 , 거꾸로 호출해주는 역할을 하므로 , "콜백함수" 라고 부른다.

--------------------------------------------------------------------------------------------------------

Java 시작

	public static void main(String[] args){
		//int x = 8;
		{
			// 인스턴스 초기화 영역
			k=7

		}
		System.out.println(x);
	
	}

{  } - 인스턴스 초기화 영역

인스턴스 초기화 영역은 해당 클래스로부터 인스턴스를 생성할 때 마다
실해되는 영역을 말함. 따라서 new LocalArea()때 영역을 건드리게됨
개발시 거의 보기 힘들다.. 
왜?? 생성자가 이미 객체의 변수들을 초기화 하는 역할을 하기 때문에
거의 다 생성자로 초기화 한다.


--------------------------------------------------------------------------------------------------------

select *from emp,dept
where emp.deptno = dept.deptno;

select ename,sal,comm,dept

select ename,sal,dname,loc
from emp E,dept D
where E.deptno = D.deptno
and deptno = 


--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

