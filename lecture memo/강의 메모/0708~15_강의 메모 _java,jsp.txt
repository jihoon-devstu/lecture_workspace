
--------------------------------------------------------------------------------------------------------

수업 시작.

jsp의 내장객체?
 - request
 - response
 - out
 - session
 - application

  이 서블릿의 인스턴스가 생성될 때 , 서블릿의 초기화를 담당하는 메서드인 init()을 이용하면

  개발자가 이 서블릿의 원하는 정보를 전달할 수 있다. -> 필터와 동일 !! 

--------------------------------------------------------------------------------------------------------

모델1 방식 : JSP 또는 서블릿이 MVC 중 V와 C를 담당하는 개발 방식 (모델만 따로 떨어져있음)

모델2 방식 : MVC 패턴을 JavaEE기술로 구현해 놓은 모델
	Model : .java (Plain Old Java Object) - POJO
	View : 보여지는 부분은 jsp로 구현
	Controller : Servlet 으로 구현

참고) POJO 유래 (Plain Old Java Object)
- 초창기 JAVA가 세상에 이름을 알리기 시작하자 , 엔터프라이즈 시장을 노림... -> 참패

- 컴포넌트 기반의 JAVA 기술 -> 기업용 자바 (JavaEE)

- JavaEE (Enterprise Java Bean - 많이는 쓰였으나... 자바 기술을 너무 벗어남. 자바 기술로 보기 힘들 정도....)
	-> 트랜잭션 자동 처리 예외, 이메일...

- 로드 존슨이 책을 씀 (Expert one on one) - EJB는 자바가 아니다....
	-> 시범) 순수 자바(POJO) + xml 만으로도 자동 트랜잭션이 가능하다를 증명함.
	-> 그리고 로드 존슨은 자신이 만든 프로그램을 가리켜 스프링이라고 부름. 

--------------------------------------------------------------------------------------------------------

MVC 패턴

M : Model 
 -> 데이터 표현 코드 , CRUD 코드 , 업무 로직 (비즈니스 로직)

V : View 
 -> 보여지는 영역 (디자인 , UI 등)

C : Controller
 -> 중재하는 영역

--------------------------------------------------------------------------------------------------------

MVC패턴에 의해 , 디자인 영역과 로직 및 데이터 영역은 분리시켜야 한다.

- 유지보수성이 높아지기 때문에.
- 중간에 중재자인 Controller가 나서야 한다.

-> 컨트롤러는 Servlet으로 정의되어야 한다.

                   why? 
- 1) JSP는 View로 사용할 것이므로
- 2) 웹 기반의 컨트롤러는 클라이언트의 요청을 받는 능력이 있어야 하므로 !!!

--------------------------------------------------------------------------------------------------------

실제 업무에서의 MVC??

 - 기존 우리의 MVC는 요청의 수마다 컨트롤러 매핑 해야함

 - 그러나 , 요청에 대한 처리를 1:1 대응하는 객체로 처리하는 개발 패턴을 가리켜 Command Pattern 이라 함.


WEB - INF 는 외부의 웹 브라우저로부터의 접근을 막는 것이지

자바 코드 내부에서의 접근을 막는것이 아니다 !!


--------------------------------------------------------------------------------------------------------

Controller 의 5대 업무

1. 요청을 받는다.

2. 요청을 분석한다.

3. 직접 일하지 않고 알맞는 로직객체(모델) 에게 일을 시킨다.

4. 결과에 보여질 데이터를 보관한다.

5. 알맞는 결과를 보여준다.

--------------------------------------------------------------------------------------------------------


SimpleUrlHandlerMapping
DefaultAnnotationHandlerMapping
BeanNameUrlHandlerMapping

--------------------------------------------------------------------------------------------------------
 * 이 서블릿이 초기화될 때 , 매핑 파일에 등록된 컨트롤러들만 인스턴스를 생성하여 모아야 하는데,
 * 이 서블릿이 직접 하지 않고 , 개발자가 등록한 핸들러 매핑에게 맡김.
 * 또한 추후 요청을 처리할 때도 , 어떤 하위 컨트롤러가 동작해야 하는지도 , 핸들러 매핑이 알아서 분석하여
 * 이 서블릿에게 반환한다... 왜?? 어제까지는 요청이 들어올 때 마다 하위 컨트롤러의 인스턴스를 생성하는
 * 방식이기 때문에 메모리가 낭비된다....

--------------------------------------------------------------------------------------------------------

서비스란??
- 모델 파트의 업무를 추상화(단순화) 시켜 컨트롤러가 상세히 모델 파트의 업무를 수행하도록 존재.

- 만일 이 서비스 객체가 없다면 , 컨트롤러가 모델 파트의 전문 영역을 담당해야하는 상황이 발생...
- 이 경우 , 컨트롤러와 모델 영역의 경계가 모호해지므로(MVC 구조가 깨져버리므로) 
- 추후 컨트롤러가 교체되면 , 모델이 동작하지 않게 되어버림.

--------------------------------------------------------------------------------------------------------

Spring을 왜 쓰는가???

- 로드 존슨이 자신의 저서에 기존 Enterprise 기반 java 애플리케이션 모델을 비판하면서
  순수 java(POJO) + XML 기업용 java 코드를 시범 보임. Spring 2.5 기반

--------------------------------------------------------------------------------------------------------
[스프링을 이루는 두개의 개발 축]

1. DI (Dependency Injection) - 의존성 주입
	- 의존성이 있는 객체는 직접 생성하지 말고 , 외부에서 주입해라.
	- java 안에서 유지 보수성을 높이려면 직접 new 하지 말라!!

2. AOP (Aspect Oriented Programming)
	- 관점 지향 프로그래밍
	- 애플리케이션에 전반적으로 등장하는 공통 코드(횡단적 관심사)를 외부의 '관점'으로 빼놓고
	  이 공통 코드가 필요한 시점에 , 동작 시키는 방식. (참고, 주로 메서드 호출시 관여)

--------------------------------------------------------------------------------------------------------
[DI]

DI를 구현하기 위한 첫번째 원칙.  [has a 관계를 구축할 땐 , 자료형을 추상적으로 상위자료형으로 보유하여야 한다.]

New 연산자는 정확한 클래스명을 적어야 하기 때문에 , 의존성이 생겨버림.

애플리케이션의 규모가 큰 엔터프라이즈 급 일때는 , 유지보수성을 높이는 것이 곧 , 비용과 직결된다.

따라서 유지 보수성을 높이기 위해서는 has a 관계를 구축할 땐 정확한 자료형을 보유하기 보다는

상위 개념의 자료형을 보유함으로써 , 객체와 객체간의 관계를 느슨하게 하는게 좋다 !!

Application Context = 스프링이 대신 New 해줄테니 , 의존성을 낮춰라 !!

springContext 4.3.30 
springcore 4.3.30
디펜던시 가져오기
--------------------------------------------------------------------------------------------------------

[AOP]

Aspect 지향 프로그래밍 개념 및 라이브러리는 스프링 것이 아님 !!! 
스프링이 개발되기 이전부터 IT분야에 있던 개념임 !!!

자바 기반의 AOP 라이브러리도 이미 aspectj 라고 불리는 것이 있었음...

aspectj weaver 1.18.14
aspectj rt 1.8.14
spring aop 4.3.30

디펜던시 가져오기
(scope 지우기)
--------------------------------------------------------------------------------------------------------
스프링에서 관리하는 클래스를 가리켜 Bean 이라고 하며 

Bean들을 대상으로 어떤 역할을 수행하는 관점에서 지칭되는 용어로 Component가 있다.


ModelAndView

1. Model에는 개발자가 저장할 데이터를 저장
	-> request.setAttribut("키",value) ㅡㄹㄹ 모델에 넣자 ! 

2. View DispatcherServlet이 조합할 뷰의 이름
	-> /notice/list/result/view 안씀 !!!
	-> 접두어 접미어 방식 선호.


--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

