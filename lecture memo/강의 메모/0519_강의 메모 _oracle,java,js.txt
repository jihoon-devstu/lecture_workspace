
--------------------------------------------------------------------------------------------------------

수업 시작.

JAVA GUI 수업 시작

GUI 프로그래밍을 윈도우 프로그래밍이라고도 함.
모든 UI 컴포넌트는 윈도우 안에서 구현되므로...

--------------------------------------------------------------------------------------------------------

[java 컴포넌트의 유형]

컴포넌트란 ? 재사용 가능한 UI를 갖는 객체단위 (예 - GUI분야에서는 버튼,체크박스 등)

- 남을 포함할 수 있는 유형 ***컨테이너 유형*** 예) Frame 
  

특징) 남을 포함하려다 보니 , 어떻게 배치할지를 고민 함.

따라서 컨테이너 형에는 배치 관리자(Layout Manager)가 지원됨.
컨테이너 유형은 개발자가 배치관리자를 지정하지 않아도, 시스템에서 기본으로 적용되는
배치 관리자가 있음..예) Freame의 경우는 BorderLayout이 적용



- 남에게 포함되는 유형
 *비쥬얼 컴포넌트형*
(예 , 체크박스 , 버튼 등 포함되는 유형들)



--------------------------------------------------------------------------------------------------------

배치관리자 종류)

1.  BorderLayout (동,서,남,북,센터의 방향을 갖는 배치)
  -> 각 방향에 들어가는 컴포넌트는 자신의 크기를 잃어버리고, 확장해버림.
      따라서 대왕버튼이 만들어졌음..

2. FlowLayout (위치가 결정되지 않고 , 컨테이너에 따라 흘러다님)
   -> 단 방향성이 있어서 수평방향의 흐름 또는 수직방향의 흐름 둘중 하나임.

3. GridLayout (행과 열의 배치방식)
  -> 각 행, 열에 배치되는 즉 셀에 들어가는 컴포넌트가 자신의 크기를 잃어버림

4. CardLayout (마치 포커의 카드처럼 오직 하나의 카드만 보여지는 배치방식)
화면 전환 시 사용되는데 , 사실 직접 만들어 구현해도 되기 때문에 몰라도 됨.

--------------------------------------------------------------------------------------------------------

처음 보는 객체에 대한 대처법

1)객체명으로 기능을 예측하자, 예측이 안되면 조사하자

2) 사용하기 위해 메모리 올리는 법을 파악 (객체의 유형은 3가지)
	-> 일반클래스 : new 생성자()
	-> 추상클래스 : 자식으로 구현한 후 자식을 new 생성자()
	-> 인터페이스 : 자식으로 구현한 후 자식을 new 생성자()

--------------------------------------------------------------------------------------------------------

java GUI에서도 사용자의 반응에 대한 이벤트 처리 가능
하지만 JS의 처리보다 훨씬 복잡함

html에서 클릭이벤트는 click
그러나 java에서는 클릭 이벤트라는 용어 자체가 없다..

-> action에 소속

-> JavaScript에서는 addEventListener
-> Java에서는 ActionListener 

-> ActionListener 는 인터페이스 이므로 implements 를 써서 클래스를 만듬.

public class  MyActionListener implements ActionListener{}

-> 인터페이스 구현을 선언하면 언제나 자식 클래스는 구현을 강요받음.

public void actionPerformed(ActionEvent e){}
--------------------------------------------------------------------------------------------------------

모든 GUI 프로그래밍에서 , UI 컴포넌트에 대한 이벤트가 발생했을 때

제일 먼저 이벤트를 감지하는 주체는 사실 해당 "OS"
 
OS는 자신이 감지한 이벤트에 대해 

1. 정보 객체를 만든 후 

2. 이 정보를 해당 프로그램에 전달해줌.

3. 해당 프로그램은 OS가 전달한 이벤트 정보에 대해
    1:1 대응되는 객체를 인스턴스화시켜 메모리에 올리고

4. 인스턴스를 해당 프로그램으로 전달하게 됨.

--------------------------------------------------------------------------------------------------------

[JS] 시작

C , java , C#등 대부분의 프로그래밍 언어가 배열 선언 시, 정적 배열을 원칙으로 함.
     -> 위 언어들에서 배열은 생성시 그 크기를 고정하지 않으면 안됨 !! 

그러나 JavaScript는 그 원칙이 적용되지 않음. (크기가 고정되지 않은 빈 배열 선언 가능)




--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

