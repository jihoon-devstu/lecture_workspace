
--------------------------------------------------------------------------------------------------------

수업 시작.

AWT는 자바의 초창기 GUI 패키지임은 맞지만 , OS마다 다른 디자인으로 실행되었다.

mac - 맥에 맞게 
win - 윈도우 os에 맞게
swing은 os 즉 플랫폼에 상관없는 중립적인 Look&Feel 디자인을 유지한다...

요즘은 swing처럼 os에 어울리지 않는 java에 최적화된 디자인을 지양함.
따라서 javaFX가 나왔음.

swing은 기존의 awt를 계승했기 때문에 우리가 사용해왔던
awt컴포넌트 명에 J접두어만 붙는다...
ex) jButton


--------------------------------------------------------------------------------------------------------

자바의 기본 자료형은 3가지가 있음.
기본 자료형과 객체자료형간 변환이 가능하도록 지원되는 객체들이 있는데
이런 객체들을 가리켜 래퍼클래스라함.
Integer(int x=3); ==> 객체3 , 객체.메서드(), 객체.속성
지원되는 이유 ? 기본자료형으로는 할수 없었던 더욱 많은 일을 하기 위해서...

Integer.parseInt("45") --> 45

1) 숫자
	정수 : byte < short < int < long
(앞글자만 대문자로 하되 , int만 Integer)
	실수 : float < double

2)문자 : char
(Character)
3) 논리값 : boolean


--------------------------------------------------------------------------------------------------------

그래픽 프로그래밍시 , 알고 있으면 도움이 비유

[현실]			[프로그래밍]
1) 화가			컴포넌트
2) 붓(그리는 행위)		컴포넌트가 보유한 그리는 메서드 (paing())
3) 팔레트, 기타 도구	paint(Graphics g)
4) 그려질 대상		컴포넌트 자신

--------------------------------------------------------------------------------------------------------

모든 컴포넌트는 스스로를 그린다...
버튼이 스스로 그림을 그릴 때 뺏어보기 !!

버튼 뿐만 아니라, 눈에 보여지는 모든 컴포넌트는 실행시 스스로를 그린다.
따라서 개발자가 원하는 그림으로 커스텀 하려면 , 그 그림을 뺏어서 그리면 된다.
(버튼을 상속받아 오버라이딩 해버리자)

-> 자바에서 대상 클래스가 final로 선언되어 있지 않으면
    언제나 상속이 가능함 !! 

--------------------------------------------------------------------------------------------------------

자바에서 생성자는 물려받지 않는다 !!! 버튼의 제목을 출력하는 JButton
고유의 생성자를 호출하지 않으면 제목이 나올 수 없다... 따라서 super() 호출
하지말고 매개 변수 있는 생성자를 호출해야 한다.

따라서 public MyButton(){
	super();
	}
이 생략되어 있으므로 , 매개변수를 집어 넣자.

★부모의 초기화 super()보다 앞선 코드는 존재할 수 없기때문에
	-> 가장 시급하기 때문에.
  super()보다 앞서는 코드는 존재할 수 없다.
	
--------------------------------------------------------------------------------------------------------

버튼 뿐 아니라 , 컴포넌트들이 보유하고 있는 paint() 메서드를 오버라이딩 하기 !!
Graphics 는 그림 그리는 도구임.. !! (도형, 이미지, 글씨, 선 , 점 등을 그린다...)

public void paint(Graphics g){
}

버튼 그림 뻇기 결론 : 컴포넌트 중 ,  본래의 그래픽을 사용해야 할 경우
개발자가 그림을 뺏어야 할 상황이 있음.

--------------------------------------------------------------------------------------------------------

이미지를 얻는 것은 개발자의 능력밖이므로 , 시스템상의 이미지를 대신 구해주는 객체를 통해
추상 클래스인 Image 객체의 인스턴스를 얻어와 보자.

DefaultToolkit kit;


--------------------------------------------------------------------------------------------------------

파일명 : Gallery.java
버튼명 : bt_prev  , bt_next
파일명 출력 (라벨): la_title

전체 레이아웃 : 보더 레이아웃

맨위 panel (p_north)

p_center 에 사진 출력

전체 크기 : 600
높이 : 500

패널 : 윗패널 50
아래 패널 : 550

--------------------------------------------------------------------------------------------------------

패널에 그림을 그리기 위해 즉 , paint() 메서드를 재정의하려고 !! 

ImageObsercer란?? 

이미지를 로드할 때 (비동기 이기 때문에) 
이미지 로드가 완료되지 않은 상황에서 옵저버에 의해 이미지가 완전히
로드 될 수 있도록 내부적인 처리가 지원됨.

이때 옵저버 역할을 수행할 객체를 개발자가 선택할 수 있는데
스윙의 JPanel은 ImageObserver 인터페이스를 구현한 객체이므로
옵저버 역할이 가능하다...

--------------------------------------------------------------------------------------------------------

자바스크립트와는 달리 , 대부분의 언어는 배열이 고정배열이므로 
반드시반드시 !!!! 배열 선언 시 그 크기를 명시해야 한다!!!

--------------------------------------------------------------------------------------------------------

자바에선 , 이벤트를 일으키는 컴포넌트를 "이벤트 소스"라고 한다.

--------------------------------------------------------------------------------------------------------

그래픽 프로그래밍에서 , 컴포넌트에 약간의 변화라도 생기면
그 그림은 지워지고 다시 그려져야 한다 !! 

이는 개발자가 처리하는 것이 아니라 , 시스템이 알아서 랜더링을 담당하게 됨.

컴포넌트에 변경이 생기면 다음의 과정을 거쳐서 그래픽이 구현된다.

[AWT]

1. 최초 컴포넌트 등장 시 paint()에 의해 눈에 보여진다.

2. 사용자가 컴포넌트의 그림에 변화를 준다.

3. jvm은 기존의 그림을 지워야하므로 update()메서드를 호출하여 그림을 깨끗이 지운다

4. 내부적으로 paint()메서드를 호출하여 변경된 그림을 화면에 보여준다.

--------------------------------------------------------------------------------------------------------
그러나 우리는 swing을 쓰고 있으므로

[swing]

1. 사용자가 컴포넌트에 변화를 준다

2. painComponent()를 호출하며 화면을 지운다. (update() 메서드가 호출되는게 아님 !!)

3. 스스로 paint() 호출 (변경된 그림을 보여주기 위해 !!)
--------------------------------------------------------------------------------------------------------
repaint() 메서드

변경된 이미지를 보기 위해서는 사용자의 윈도우 조작이 아니라
개발자가 프로그래밍적으로 지우고 다시 그릴것을 요청해야한다 (버튼을 눌렀을 때 등)
이때 호출되는 메서드가 바로 repaint() !!!

★★★★★개발자는 절대로절대로 !!! paint()를 직접 호출해서는 안됨 !!! 
-> 그림은 시스템이 알아서 그리기 때문에 !!! 

repaint() --> update(AWT) 			---> paint()
	     paintComponent(Swing)		---> paint()


--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

