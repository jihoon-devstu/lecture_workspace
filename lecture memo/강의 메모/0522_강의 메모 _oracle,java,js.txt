
--------------------------------------------------------------------------------------------------------

수업 시작.

--------------------------------------------------------------------------------------------------------

실행중인 java 프로그램에서 디스크의 파일을 접근하여
데이터를 읽고 , 프로그램으로 불러들여 출력해보자 !! 

실행중인 프로그램이 파일 등의 자원의 데이터를 읽어들이기 위해서는
스트림 객체가 필요하다.

guiproject / res 에 memo.txt파일 생성 (내용은 java 4글자만)

gui/src/io 폴더 생성

FileLoader 클래스 자바 파일 하나 생성

--------------------------------------------------------------------------------------------------------
Stream 이란 ? 

현실에서 물줄기 , 물의 흐름을 의미한다.
그러나 전산에서는 대상이 물이 아닌 데이터임.

흐름의 방향은 2가지가 있음.

1) 실행중인 프로그램으로 데이터가 흘러들어오면 Input (입력)

FileInputStream

2) 실행중은 프로그램에서 데이터가 흘러나가면 Output (출력)

FileOutputStream

--------------------------------------------------------------------------------------------------------

파일을 대상으로 한 입력 객체 (파일을 읽어들일 수 있는 객체)
디스크에 있는 파일에 스트림이 생성되는 순간임.

문법상 문제는 없지만 , 프로그램 코드 상의 문제 외의 문제 때문에
프로그램이 정상수행될 수 없는 상황이 될 수 있음.
이 상황을 방지하기 위해 컴파일러 차원에서 컴파일 거부중!!

--------------------------------------------------------------------------------------------------------

만약 파일이 없다면 , 파일을 복구하지는 못하므로 , 원인 등을 알려주거나
로그를 남기는 등의 처리... 

try{
	이 안에 진행할거
} catch(FileNotFoundException e){
	System.out.println("파일을 찾을 수 없습니다.");
}

catch문의 소괄호 안에 에러의 원인이 되는 객체의 인스턴스를 생성하여 전달해준다 !! 

예외처리 !! 

--------------------------------------------------------------------------------------------------------

read하려면 IOException 도 있어야함 !!! 

catch는 else if 문 처럼 처리

try{
}catch(){
}catch(){
}

--------------------------------------------------------------------------------------------------------

DB와 Stream은 반드시 닫아야 한다 !! 

fis.close(); 해야함.

그 위치는 try와 catch가 끝난 다음!!

실행부가 try문을 수행하던 , catch문을 수행하던 즉 어느쪽을 수행하던 반드시 거쳐나가는 영역.
--> finally

try{
}catch(){
}catch(){
}finally{

}


그러나 finally 안쪽에도 IOException이 필요함 !!

try{
fis.close();}catch(IOException e){
//일반 유저가 아닌, 개발자를 위한 log 출력
e.printStackTrace();
}

--------------------------------------------------------------------------------------------------------

컴파일 시 예외 처리를 강요하는 예외 방식을 가리켜
강요된 예외라 함.

따라서 정해진 방식

try {} catch(FileNotFoundException e) {} finally{ if(fis != null){ try { fis.close();}} catch(IOException e){e.printStackTrace();} }

--------------------------------------------------------------------------------------------------------
이클립스 단축키

컨트롤 + 쉬프트 + O = import
컨트롤 + 스페이스바 = 자동완성
컨트롤 + 알트 + 방향키 아래로 = 복사
알트 + 쉬프트 + Z = try/catch 템플릿 적용
컨트롤 + F11 = 컴파일 및 실행
--------------------------------------------------------------------------------------------------------

GUI 윈도우 기반으로 파일인풋스트림 , 파일아웃풋스트림을 만들어보자 !! 

JOptionPane.showMessageDialog(this, "복사완료");

OOO.getText() -> TextField 

--------------------------------------------------------------------------------------------------------

에러란 ? 어떤 프로그램이 정상적으로 실행되지 못한 상황
즉 기술적인 분류와 상관없이 사용자 입장에서 느끼는 문제 상황 전체를 가리키는 포괄적 개념.
예) 프로그램이 멈춤 , 예상치 못한 이상한 값 출력 등

Java에서의 예외란?

java에서는 에러와 예외는 명확히 구분됨.
프로그램에서 예상치 못한 문제가 발생했을 때, 이를 처리하는 방법과 관련된 기술.
예외 처리를 통해 프로그램의 비정상적인 종료를 방지하고, 정상적인 흐름으로 유지할 수 있음.

예외 : 코드 실행중 발생하는 문제 (개발자가 코드로 처리 가능)
에러 : JVM 자체의 심각한 문제 , 시스템 레벨의 문제로 해결 불가능 (개발자가 처리 불가능)

--------------------------------------------------------------------------------------------------------

체크 예외 / 언체크 예외
Checked Exception / Unchecked Exception

즉 , 개발자에게 책임을 강요할지 말지에 따라 구분됨.

체크 예외(Checked Exception) : 개발자에게 책임을 강요하는 예외 (컴파일 시점에 강요받음.)
특징 : 중요한 것만 강요

try~catch 또는 throws 를 사용해 처리.

ex) IOException 등


언체크 예외 (Unchecked Exception) : 개발자에게 책임을 강요하지 않는 예외. (컴파일 시점에 강요 없음.)
특징 : 예외처리를 하지 않으면 프로그램이 비정상 종료될 수 있음.

처리 여부는 개발자의 자유.

ex) ArrayIndexOutOfBoundsException 등

--------------------------------------------------------------------------------------------------------

언체크 예외의 경우 , 개발자가 예외를 커스텀할 수 있음.
RuntiomeException 을 상속받아야함 (언체크 예외의 상위객체)

--------------------------------------------------------------------------------------------------------

JMenuBar bar ; -> 눈에 보이지는 않지만 , 메뉴들을 얹혀놓을 막대기
	       -> 위치가 딱 정해져 있다.. 윈도우 창 상단 고정...

JMenu[] menu = new JMenu[5];  -> 공간엔 JMenu 만 허용


JFileChooser chooser; //파일 탐색기를 컨트롤 하는 전담 객체
	
--------------------------------------------------------------------------------------------------------

포트폴리오
  [ppt]

1) 프로젝트 주제
2) 목표
3) 개발환경
4) 프로젝트 진행 방법 / 적용 기술 /라이브러리 / 코드소개
5) 시연
6) 아쉬운점 , 잘한점 등 평가

[ 콘솔 기반 창고 관리 프로그램 ]

ERD 작성 최우선

한주간 프로젝트 - 오전 4시간 수업 / 오후 프로젝트 제작
--------------------------------------------------------------------------------------------------------

오라클 연동 과정 !!! 

1) java언어가 데이터 베이스를 핸들링 하기 위해서는 db를 제작한 벤더사에서제공하는 구현체인 
   driver를 먼저 메모리에 로드해야 한다.. 단 , 주의 !! 일반 클래스처럼 new 할 수 없고 ,
   method 영역에 개발자가 직접 올려야 한다 !!! 

2) Class.forName()  -> jvm 의 메서드 영역에 개발자가 직접 로드.


Class.forName("oracle.jdbc.driver.OracleDriver");

DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","java","1234");



--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

