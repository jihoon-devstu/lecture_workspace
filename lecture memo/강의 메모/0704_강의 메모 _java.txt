
--------------------------------------------------------------------------------------------------------

수업 시작.

Mybatis
 - 어젠 Collection 1:多 배웠음 / 오늘은 association 1:1 배울예정
 - JDBC connection -> 커넥션풀을 자체적으로 만들었는데 -> 서버에서 지원하는 풀 사용법 배울 예정
 - weblogic , tomcat , 웹컨테이너 자체 커넥션 풀이 만들어져있음. 써야함.

--------------------------------------------------------------------------------------------------------

WAS? (Web Application Server)

 - Web Container 포함 + 기능이 많음.
 - 규모가 매우 큼.

--------------------------------------------------------------------------------------------------------

Web Container??

 - javaEE 기술을 이해하는 애플리케이션
   + apache server 엔진이 내장 되어있음.

--------------------------------------------------------------------------------------------------------

Web Server? 

 - 정적 자원(html,css,image,동영상 등)을 전담하는 서버 
 - (윈도우 서버인 IIS , 리눅스 서버인 Apache)
 - 이메일 서버 , FTP , DNS Server

--------------------------------------------------------------------------------------------------------

오늘 수업 : 웹 로그인 - 세션 , 쿠키

(다음주 수업 : 비동기 통신 , Hibernate)

--------------------------------------------------------------------------------------------------------

JNDI
Java Naming Directory Interface


- 자바 코드 안에 로직이 아닌 , 설정 정보를 직접 작성하면 유지 보수성이 떨어질 수 있음.
- 데이터베이스 연동 정보 , 이메일 설정 정보 , 업로드 파일의 경로...
- 외부에있는 XML에 작성하면 유지보수가 편해짐 !!! 
- 이때 개발자는 자바코드 밖의 외부 설정파일에 자원을 관리할 수 있다 
- 이 기술을 가리켜 JNDI (Java Naming Directory Interface) 라 부른다.
- 설정 정보를 외부에 두고서 , 이름으로 찾아서 자원을 접근하는 기술 !!
- 오늘 실습은 여러 자원들 중 JNDI로 관리할 대상이 아파치에서 만든 커넥션풀인 것 뿐이다.

--------------------------------------------------------------------------------------------------------
JNDI 실습 시작

1. 톰켓 Servers의  server.xml 에 내용 작성 (</globalnamingresources> 바로 위에)

  	<!-- 톰켓이 지원하는 커넥션 풀 -->
  	<Resource 
  		name="jndi/mysql"
  		auth="Container"
  		type="javax.sql.DataSource"
  		driverClassName="com.mysql.cj.jdbc.Driver"
  		url="jdbc:mysql://localhost:3306/spring4"
  		username="spring4"
  		password="1234"
  		maxTotal="20"
  		maxIdle="10"
  		maxWaitMillis="-1"
  		/>

1-2. 아래로 쭉 내려서 Context에 잡혀있는 프로젝트 </context> 만들고 그 아래 내용 작성
      <!-- 이클립스 내부 톰켓(테스트 및 개발용 일 때) -->
      <ResourceLink 
      	name="jndi/mysql"
      	global="jndi/mysql"
      	type="javax.sql.DataSource"
      />


2. context.xml에 내용 작성 ( </Context> 위에)

    	<resource-ref>
    		<description>MySQL Datasource</description>
    		<res-ref-name>jndi/mysql</res-ref-name>
    		<res-type>javax.sql.DataSource</res-type>
    		<res-auth>Container</res-auth>
    	</resource-ref>


3. jsp 파일에 내용 작성 

<%
	InitialContext context = new InitialContext();

	//server.xml에 명시된 jndi/mysql 이라는 이름으로 검색시작
	
	DataSource ds = (DataSource)context.lookup("java:comp/env/jndi/mysql");
	Connection con = ds.getConnection();//풀로부터 커넥션 하나 꺼내기
	out.print(con);
%>



--------------------------------------------------------------------------------------------------------
MybatisConfig 클래스 작성

- mybatis-config.xml을 읽어들여, 개발시 쿼리문을 수행할 수 있는 객체인 SqlSession을 
- SqlSessionFactory로 부터 얻게 해주는 유틸 클래스.
- mybatis는 내부적으로 JDBC를 사용함. 하지만 개발자가 상투적인 JDBC코드를 일일이 작성하지 않게 하기 위함이 목적.
- 따라서 코드들을 숨겨놓고 그 대신 SqlSession을 통해 쿼리를 수행할 수 있게 해줌.



부서별 근무자수 join

select e.deptno , dname , loc , empno, ename, job, mgr, hiredate, sal, comm
from dept d , emp e
where d.deptno = e.deptno

select d.deptno, d.dname, d.loc, count(ename)
from dept d LEFT OUTER JOIN emp e 
ON d.deptno = e.deptno
group by d.deptno, d.dname, d.loc;

--------------------------------------------------------------------------------------------------------


자바의 로그의 레벨 : trace < debug < info < warn < error < fatal

	trace : 너무나 많은 사소한 정보까지 출력됨 (운영 환경에서는 꺼놓기)
			for()문에서 i값 출력
			
	debug : trace 다음으로 많은 정보가 출력 , 파라미터 값 출력 , 변수값 출력 (운영 환경에서는 꺼놓기)
	
	info : 프로그램의 흐름을 체크, 예) 실행부가 어떤 메서드에 도달했고 , 수행하는지...(운영 환경에서는 꺼놓기)
	
	warn : 경고 상황 (당장은 에러가 없으나 , 주의를 요하는 것들) - 운영환경 에선 On
	
	error : 오류 발생 (예외 처리 시) - - 운영환경 에선 On

--------------------------------------------------------------------------------------------------------

이 서블릿의 요청을 시도할 때, 웹 컨테이너에선 세션 객체를 생성하면서 , 동시에 세션 ID가 할당됨.
그리고 이 세션 아이디는 톰켓이 보내는 응답 정보에 쿠키 형태로 존재하게 됨...
단 , 세션과 세션아이디는 매 요청마다 만들어지는것이 아니라 , 클라이언트가 요청 시 톰 켓이 발급한 쿠키가 
존재하지 않을 때는 새로 만들고, 요청 후,일정 시간동안 아무런 재요청이 없을때는 사용하지 않는 것으로 판단하여
새롭게 세션을 할당함.




--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------






	
--------------------------------------------------------------------------------------------------------







--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------------------




--------------------------------------------------------------------------------------------------------

